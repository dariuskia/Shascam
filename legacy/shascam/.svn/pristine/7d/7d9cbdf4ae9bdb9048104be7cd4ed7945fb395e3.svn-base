import React, { useEffect, useState } from 'react';
import { Alert, Button, TextInput, View, StyleSheet, Text, TouchableOpacity, SafeAreaView, ScrollView, StatusBar } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import Loader from './Loader';
import { customstyles } from "../customstyle";
import { commonPost, getEnumerations, getUserAddress, updateAddress } from './functions';
import Background from './Background';
import { Picker } from "@react-native-picker/picker";
import MyTabs from './MyTabs';
import Checkbox from 'expo-checkbox';

function Address({ navigation, route }) {
    const [userId, setuserId] = useState('');
    const [nationaity, setNationality] = useState([]);
    const [country, setCountry] = useState([]);
    const [isdCode, setIsdCode] = useState([]);
    const [loader, setLoader] = useState(false);
    const [updateLoader, setUpdateLoader] = useState(false);
    const [updateLoader2, setUpdateLoader2] = useState(false);
    const [resErr, setResErr] = useState('');
    const [billErr, setBillErr] = useState('');
    const [resSucc, setResSucc] = useState('');
    const [billSucc, setBillSucc] = useState('');
    const [same, setAsSame] = useState(false);

    // Residentail Address
    const [resident_add1, setResAdd1] = useState('');
    const [resident_add2, setResAdd2] = useState('');
    const [resident_city, setResCity] = useState('');
    const [resident_state, SetResState] = useState('');
    const [resident_zip, setResZip] = useState('');
    const [resident_isd, setResISD] = useState('');
    const [resident_country, setResCountry] = useState('');
    // Close

    // Resident address
    const [billing_add1, setBillAdd1] = useState('');
    const [billing_add2, setBillAdd2] = useState('');
    const [billing_city, setBillCity] = useState('');
    const [billing_state, SetBillState] = useState('');
    const [billing_zip, setBillZip] = useState('');
    const [billing_isd, setBillISD] = useState('');
    const [billing_country, setBillCountry] = useState('');
    // close

    useEffect(() => {
        setuserId(route.params.userDetails.id);
        getResidentialAdd(route.params.userDetails.id);
        getBillingAdd(route.params.userDetails.id);
        getNationality();
        getCountryList();
        getCountryCode();
    }, []);

    // Get Address ::
    let getResidentialAdd = (userId) => {
        let data = {
            id: userId,
            type: 'residential'
        }
        getCommonAddress(data);
    }

    let getBillingAdd = (userId) => {
        let data = {
            id: userId,
            type: 'billing'
        }
        getCommonAddress(data);
    }
    let getCommonAddress = (data) => {
        var resp = getUserAddress(data)
            .then(resp => {
                setLoader(true);
                if ((data.type == 'residential')) {
                    setResAdd1(resp.address_1);
                    setResAdd2(resp.address_2);
                    setResCity(resp.city);
                    SetResState(resp.state);
                    setResZip(resp.zipcode);
                    setResISD(resp.country_code);
                    setResCountry(resp.country);
                } else {
                    setBillAdd1(resp.address_1);
                    setBillAdd2(resp.address_2);
                    setBillCity(resp.city);
                    SetBillState(resp.state);
                    setBillZip(resp.zipcode);
                    setBillISD(resp.country_code);
                    setBillCountry(resp.country);
                }
            })
            .catch((error) => {
                console.log(error)
            })
    }
    // Close

    // Get Enumerations ::
    let getNationality = () => {
        let data = {
            type: 'nationalities'
        }
        getCommonListing(data);
    }
    let getCountryList = () => {
        let data = {
            type: 'country'
        }
        getCommonListing(data);
    }
    let getCountryCode = () => {
        let data = {
            type: 'mobile_country_codes'
        }
        getCommonListing(data);
    }
    let getCommonListing = (data) => {
        var resp = getEnumerations(data)
            .then(resp => {
                let result = resp;
                if ((result.nationalities)) {
                    setNationality(result.nationalities);
                } else if (result.mobile_country_codes) {
                    setIsdCode(result.mobile_country_codes);
                } else {
                    setCountry(result.countries);
                }
            })
            .catch((error) => {
                console.log(error)
            })
    }
    // Close

    // Update Address::
    let updateUserAddress = (types) => {
        let type_of = '';
        let data = {};
        if (types == 'res') {
            data = {
                id: userId,
                address_1: resident_add1,
                address_2: resident_add2,
                city: resident_city,
                country: resident_country,
                country_code: resident_isd,
                state: resident_state,
                zipcode: resident_zip,
                type: 'residential',
                api_url: 'updateUserAddress'
            }
            setUpdateLoader(true);
        } else {
            data = {
                id: userId,
                address_1: billing_add1,
                address_2: billing_add2,
                city: billing_city,
                country: billing_country,
                country_code: billing_isd,
                state: billing_state,
                zipcode: billing_zip,
                type: 'billing',
                api_url: 'updateUserAddress'
            }
            setUpdateLoader2(true);
        }
        //console.log('data', data); return;


        var resp = commonPost(data)
            .then(resp => {

                let result = resp;
                // console.log('updateAddress', result);
                let status = resp.code;
                if ((result.billing)) {
                    if (status == 400) {
                        setBillErr(result.description);
                    } else {
                        setBillSucc('Details Update Successfully');
                    }
                    setUpdateLoader2(false);
                }
                else {
                    if (status == 400) {
                        setResErr(result.description);
                    } else {
                        setResSucc('Details Update Successfully');
                    }
                    setUpdateLoader(false);
                }
                setTimeout(() => {
                    setBillErr('');
                    setResErr('');
                    setBillSucc('');
                    setResSucc('');
                }, 5000);
            })
            .catch((error) => {
                console.log(error)
            })

    }
    // Close

    // Update Address::
    let sameAddress = (checked) => {
        setAsSame(!same);
        if ((checked)) {
            setBillAdd1(resident_add1);
            setBillAdd2(resident_add2);
            setBillCity(resident_city);
            SetBillState(resident_state);
            setBillZip(resident_zip);
            setBillISD(resident_isd);
            setBillCountry(resident_country);
        } else {
            Alert.alert(
                'Not Same',
                'Are you sure you do not  want to keep it as same?',
                [
                    {
                        text: 'Cancel',
                        onPress: () => setAsSame(true),
                        style: 'cancel',
                    },
                    { text: 'OK', onPress: () => confirmed() },
                ]
            );

            let confirmed = () => {
                let data = {
                    id: userId,
                    type: 'billing'
                }
                getCommonAddress(data);
            }
        }


    }

    if (!loader) {
        return <Loader />;
    }

    return (
        <SafeAreaView style={styles.scrollArea}>
            <View style={{ ...customstyles.header, ...customstyles.px15 }}>
                <View>
                    <TouchableOpacity onPress={() => navigation.goBack()} style={[customstyles.btnThemecircle, { width: 28, height: 28 }]}>
                        <Ionicons name="md-chevron-back-outline" size={16} color="white" />
                    </TouchableOpacity>
                </View>
                <Text style={{ ...customstyles.headerHeading, ...customstyles.flexgrow1, }}>Update Address</Text>
            </View>
            <ScrollView style={styles.innerView}>
                <View style={styles.container}>
                    <View style={{ ...customstyles.whitebox, ...customstyles.shadowBlock, ...customstyles.p20, ...customstyles.mt30 }}>
                        <Text style={{ ...customstyles.h4, ...customstyles.mb15 }}>Residential Address</Text>
                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>Address 1</Text>
                        <TextInput
                            placeholder={'Address 1'}
                            value={resident_add1 != '' ? resident_add1 : ''}
                            onChangeText={text => setResAdd1(text)}
                            style={{ ...customstyles.inputtheme, ...customstyles.mb10 }}
                        />

                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>Address 2</Text>
                        <TextInput
                            name="address_two" placeholder={'Address 2'}
                            value={resident_add2 != '' ? resident_add2 : ''}
                            onChangeText={(address_2) => setResAdd2(address_2)}
                            style={{ ...customstyles.inputtheme, ...customstyles.mb10 }}
                        />

                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>City</Text>
                        <View style={customstyles.dropdownBoxTheme}>
                            <Picker
                                selectedValue={resident_city ? resident_city : ''}
                                onValueChange={(value, index) => setResCity(value)}
                                mode="dropdown"
                                style={customstyles.dropdowntheme}
                            >
                                <Picker.Item label="Select City" value="" color='black' />
                                {
                                    nationaity ?
                                        nationaity.map((item, i) => (
                                            <Picker.Item key={i} label={item.code} selectedValue={item.code == resident_city ? resident_city : ''} value={item.code} color="black" />
                                        ))
                                        : <Picker.Item label='No Data' value='0' />
                                }
                            </Picker>
                        </View>

                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>Country</Text>
                        <View style={customstyles.dropdownBoxTheme}>
                            <Picker
                                selectedValue={resident_country ? resident_country : ''}
                                onValueChange={(value, index) => setResCountry(value)}
                                mode="dropdown" // Android only
                                style={customstyles.dropdowntheme}
                            >
                                <Picker.Item label="Select Country" value="" color='black' />
                                {
                                    country ?
                                        country.map((item, i) => (
                                            <Picker.Item key={i} label={item.description} selectedValue={item.description == resident_country ? resident_country : ''} value={item.description} color="black" />
                                        ))
                                        : <Picker.Item label='No Data' value='0' />
                                }
                            </Picker>
                        </View>

                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>ISD</Text>
                        <View style={customstyles.dropdownBoxTheme}>
                            <Picker
                                selectedValue={resident_isd ? resident_isd : ''}
                                onValueChange={(value, index) => setResISD(value)}
                                mode="dropdown" // Android only
                                style={customstyles.dropdowntheme}
                            >
                                <Picker.Item label="Select ISD" value="" color='black' />
                                {
                                    isdCode ?
                                        isdCode.map((item, i) => (
                                            <Picker.Item key={i} label={item.code + ' - ' + item.description} selectedValue={item.code == resident_isd ? resident_isd : ''} value={item.code} color="black" />
                                        ))
                                        : <Picker.Item label='No Data' value='0' />
                                }
                            </Picker>
                        </View>

                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>State</Text>
                        <TextInput
                            placeholder={'State'}
                            value={resident_state != '' ? resident_state : ''}
                            onChangeText={(text) => SetResState(text)}
                            style={{ ...customstyles.inputtheme, ...customstyles.mb10 }}
                        />
                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>Zipcode</Text>
                        <TextInput
                            placeholder={'Zipcode'}
                            onChangeText={(text) => setResZip(text)}
                            value={resident_zip != '' ? resident_zip : ''}
                            style={{ ...customstyles.inputtheme, ...customstyles.mb10 }}
                        />
                        {
                            resErr != '' &&
                            <Text style={{ color: 'red', fontSize: 12, marginTop: 10 }}>{resErr}</Text>
                        }
                        {
                            resSucc != '' &&
                            <Text style={{ color: 'green', fontSize: 12, marginTop: 10 }}>{resSucc}</Text>
                        }
                        <TouchableOpacity onPress={() => updateUserAddress('res')}>
                            <View
                                style={{ ...styles.button, ...customstyles.shadowBtn, backgroundColor: updateLoader == true ? "#663792" : "#663792", }}
                            >
                                <Text style={{ ...styles.buttonText, ...customstyles.textwhite }}>
                                    {updateLoader == true ? "UPDATING..." : "UPDATE"}
                                </Text>
                                {updateLoader == true && <Loader />}
                            </View>
                        </TouchableOpacity>
                    </View>

                    <View style={{ ...customstyles.checkboxinlineblock, ...customstyles.mt30 }}>
                        <Checkbox
                            value={same}
                            onValueChange={(checked) => sameAddress(checked)}
                            color={same ? 'transparent' : undefined}
                            checked={same ? true : false}
                            style={{ ...customstyles.mr10, ...customstyles.checkboxhidden }}
                        />
                        <Text style={{ ...customstyles.checkboxareainline }}>
                            {
                                same ? <View style={customstyles.checkboxlistsquareselected} ><Ionicons name="checkbox-outline" size={28} color="#663792" /></View> : <View style={customstyles.checkboxlistsquare} ><Ionicons name="square-outline" size={28} color="#663792" /></View>
                            }
                        </Text>
                        <Text style={{ ...customstyles.checkboxlistTextinline }}>Use as same</Text>
                    </View>

                    <View style={{ ...customstyles.whitebox, ...customstyles.shadowBlock, ...customstyles.p20, ...customstyles.mt30 }}>
                        <Text style={{ ...customstyles.h4, ...customstyles.my15 }}>Billing Address</Text>
                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>Address 1</Text>
                        <TextInput
                            placeholder={'Address 1'}
                            value={billing_add1 != '' ? billing_add1 : ''}
                            onChangeText={text => setBillAdd1(text)}
                            style={{ ...customstyles.inputtheme, ...customstyles.mb10 }}
                        />

                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>Address 2</Text>
                        <TextInput
                            name="address_two" placeholder={'Address 2'}
                            value={billing_add2 != '' ? billing_add2 : ''}
                            onChangeText={(address_2) => setBillAdd2(address_2)}
                            style={{ ...customstyles.inputtheme, ...customstyles.mb10 }}
                        />

                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>City</Text>
                        <View style={customstyles.dropdownBoxTheme}>
                            <Picker
                                selectedValue={billing_city ? billing_city : ''}
                                onValueChange={(value, index) => setBillCity(value)}
                                mode="dropdown"
                                style={customstyles.dropdowntheme}
                            >
                                <Picker.Item label="Select City" value="" color='black' />
                                {
                                    nationaity ?
                                        nationaity.map((item, i) => (
                                            <Picker.Item key={i} label={item.code} selectedValue={item.code == billing_city ? billing_city : ''} value={item.code} color="black" />
                                        ))
                                        : <Picker.Item label='No Data' value='0' />
                                }
                            </Picker>
                        </View>

                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>Country</Text>
                        <View style={customstyles.dropdownBoxTheme}>
                            <Picker
                                selectedValue={billing_country ? billing_country : ''}
                                onValueChange={(value, index) => setBillCountry(value)}
                                mode="dropdown" // Android only
                                style={customstyles.dropdowntheme}
                            >
                                <Picker.Item label="Select Country" value="" color='black' />
                                {
                                    country ?
                                        country.map((item, i) => (
                                            <Picker.Item key={i} label={item.description} selectedValue={item.description == billing_country ? billing_country : ''} value={item.description} color="black" />
                                        ))
                                        : <Picker.Item label='No Data' value='0' />
                                }
                            </Picker>
                        </View>

                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>ISD</Text>
                        <View style={customstyles.dropdownBoxTheme}>
                            <Picker
                                selectedValue={billing_isd ? billing_isd : ''}
                                onValueChange={(value, index) => setBillISD(value)}
                                mode="dropdown" // Android only
                                style={customstyles.dropdowntheme}
                            >
                                <Picker.Item label="Select ISD" value="" color='black' />
                                {
                                    isdCode ?
                                        isdCode.map((item, i) => (
                                            <Picker.Item key={i} label={item.code + ' - ' + item.description} selectedValue={item.code == billing_isd ? billing_isd : ''} value={item.code} color="black" />
                                        ))
                                        : <Picker.Item label='No Data' value='0' />
                                }
                            </Picker>
                        </View>

                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>State</Text>
                        <TextInput
                            placeholder={'State'}
                            value={billing_state != '' ? billing_state : ''}
                            onChangeText={(text) => SetBillState(text)}
                            style={{ ...customstyles.inputtheme, ...customstyles.mb10 }}
                        />
                        <Text style={{ ...customstyles.textpurple, ...customstyles.mb5 }}>Zipcode</Text>
                        <TextInput
                            placeholder={'Zipcode'}
                            onChangeText={(text) => setBillZip(text)}
                            value={billing_zip != '' ? billing_zip : ''}
                            style={{ ...customstyles.inputtheme, ...customstyles.mb10 }}
                        />
                        {
                            billErr != '' &&
                            <Text style={{ color: 'red', fontSize: 12, marginTop: 10 }}>{billErr}</Text>
                        }
                        {
                            billSucc != '' &&
                            <Text style={{ color: 'green', fontSize: 12, marginTop: 10 }}>{billSucc}</Text>
                        }
                        <TouchableOpacity onPress={() => updateUserAddress('bil')}>
                            <View
                                style={{ ...styles.button, ...customstyles.shadowBtn, backgroundColor: updateLoader2 == true ? "#663792" : "#663792", }}
                            >
                                <Text style={{ ...styles.buttonText, ...customstyles.textwhite }}>
                                    {updateLoader2 == true ? "UPDATING..." : "UPDATE"}
                                </Text>
                                {updateLoader2 == true && <Loader />}
                            </View>
                        </TouchableOpacity>
                    </View>

                </View>
            </ScrollView>
            <MyTabs />
        </SafeAreaView >
    )
}


const styles = StyleSheet.create({

    scrollArea: {
        flex: 1,
        width: "100%",
        backgroundColor: "white",
        // paddingTop: StatusBar.currentHeight,
    },
    innerView: {
        height: "100%",
        // paddingHorizontal: 20,
    },
    container: {
        marginBottom: 50,
        paddingHorizontal: 20
    },
    button: {
        display: "flex",
        flexDirection: "row",
        justifyContent: "space-evenly",
        alignItems: "center",
        padding: 10,
        marginBottom: 20,
        borderRadius: 30,
        marginTop: 20,
    },
    buttonText: {
        color: "#663792",
        fontWeight: "bold",
        fontSize: 20
    },
});
export default Address;