import React, { useEffect, useState } from 'react';
import { Alert, Button, TextInput, View, StyleSheet, Text, TouchableOpacity, SafeAreaView, ScrollView, StatusBar, Pressable } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import Loader from './Loader';
import { LinearGradient } from 'expo-linear-gradient';
import { customstyles } from "../customstyle";
import Dialog from "react-native-dialog";
import { getFolderName, commonPost, commonGet } from "../components/functions.js";
import AsyncStorage from '@react-native-async-storage/async-storage';
import Background from './Background';
function Info({ navigation, route }) {

    const [userId, setUserId] = useState('');
    const [folderName, setFolderName] = useState('');
    const [generalFolder, setGeneralFolder] = useState([]);
    const [userFolder, setUserFolder] = useState([]);
    const [DataisLoaded, setDataisLoaded] = useState(false);
    const [error, setError] = useState('');
    const [message, setMessage] = useState('');
    const [flag, setFlag] = useState('');

    useEffect(() => {
        let userId = route.params.user_id;
        console.log(userId + 'INFO');
        setUserId(userId);
        getGeneralFolder();
        getUserFolder(userId);
    }, []);


    // Dialog Box
    const [visible, setVisible] = useState(false);
    const showDialog = () => {
        setVisible(true);
    };
    const handleCancel = () => {
        setError('');
        setFolderName('');
        setMessage('');
        setVisible(false);
    };
    const handleDelete = () => {
        setVisible(false);
    };
    // Close


    // Folder's 
    let getUserFolder = (userId) => {
        let data = {
            id: userId,
            api_url: 'getFolderName'
        }
        var resp = commonPost(data)
            .then(resp => {
                let result = resp.data;
                //console.log(result);
                setUserFolder(result);
                setDataisLoaded(true);
            })
            .catch((error) => {
                console.log(error)
            })
    }

    let getGeneralFolder = () => {
        let data = {
            id: '0',
            api_url: 'getCommonFolder'
        }

        var resp = commonGet(data)
            .then(resp => {
                let result = resp.data;
                //console.log(result);
                setGeneralFolder(result);
                setDataisLoaded(true);
            })
            .catch((error) => {
                console.log(error)
            })
    }
    // Close

    // Adding Folder

    let validateInput = () => {
        if ((folderName.length == null) || (folderName.length == 0)) {
            setError('Please enter folder name');
            return;
        } else {
            setError('');
            handleSubmit();
        }
    }

    let handleSubmit = () => {
        let data = {
            id: userId,
            folder_name: folderName,
            api_url: 'insertFolder'
        }
        var resp = commonPost(data)
            .then(resp => {
                //console.log(resp);
                let result = resp;
                if ((result.status == 2)) {
                    setFlag('2');
                    setFolderName('');
                    setTimeout(() => {
                        setMessage('');
                        setFlag('');
                    }, 5000);
                }
                else {
                    setFlag('1');
                    setMessage(result.message);
                    getGeneralFolder();
                    setFolderName('');
                    setTimeout(() => {
                        setMessage('');
                        setFlag('');
                        setVisible(false);
                        getUserFolder(userId);
                    }, 5000);
                }
            })
            .catch((error) => {
                console.log(error)
            })
    }
    // Close

    // Delete Folder
    let deleteFolder = (folderId) => {
        //console.log(folderId);
        Alert.alert(
            'Delete Folder',
            'Are you sure you want to delete this folder?',
            [
                {
                    text: 'Cancel',
                    onPress: () => console.log('Cancel Pressed'),
                    style: 'cancel',
                },
                { text: 'OK', onPress: () => confirmDel() },
            ]
        );

        let confirmDel = () => {
            let data = {
                user_id: userId,
                folder_id: folderId,
                api_url: 'deleteFolder'
            }
            var resp = commonPost(data)
                .then(resp => {
                    let result = resp;
                    //console.log(result);
                    getUserFolder(userId);
                    setFlag('2');
                    setMessage(result.message);
                    setTimeout(() => {
                        setMessage('');
                        setFlag('');
                    }, 5000);
                })
                .catch((error) => {
                    console.log(error)
                })
        }

    }
    // Close

    if (!DataisLoaded) {
        return <Loader />;
    }
    return (
        <SafeAreaView style={styles.scrollArea}>
            {/* <Background /> */}
            <View style={{ ...customstyles.header, ...customstyles.px15 }}>
                <Text style={customstyles.headerHeading}>Info Store</Text>
            </View>
            <ScrollView style={styles.innerView}>
                <View style={styles.container}>
                    <View style={[customstyles.row, customstyles.mt10, { justifyContent: "flex-end" }]}>
                        <TouchableOpacity onPress={showDialog} style={customstyles.btnThemexs}>
                            <View style={{ display: "flex", flexDirection: "row", alignItems: "center", justifyContent: "center" }}>
                                <Ionicons name="add-outline" size={20} color="white" />
                                <Text style={customstyles.textwhite}> Add Folder</Text>
                            </View>
                        </TouchableOpacity>
                    </View>
                    {
                        flag == '2' ?
                            <Text style={{ color: 'red', fontWeight: '700', fontSize: 14 }}>{message}</Text> :
                            <Text></Text>
                    }
                    <View>
                        <Dialog.Container visible={visible}>
                            <Dialog.Title style={customstyles.h4}>Add Folder</Dialog.Title>
                            <Dialog.Description>
                                To create a new folder, please enter a name for it here.
                            </Dialog.Description>
                            {/* <Dialog.Input autoCapitalize='none'
                                label={'Name of Folder'}
                                onChangeText={folderName => setFolderName(folderName)}
                                maxLength={30} /> */}
                            <TextInput autoCapitalize='none'
                                placeholder={'Name of Folder'}
                                onChangeText={folderName => setFolderName(folderName)}
                                maxLength={30} style={{ ...customstyles.inputtheme, }}
                            />
                            {
                                error.length > 0 &&
                                <Text style={{ color: 'red', fontWeight: '700', fontSize: 14 }}>{error}</Text>
                            }
                            {
                                flag == '1' ?
                                    <Text style={{ color: 'green', fontWeight: '700', fontSize: 14 }}>{message}</Text> :
                                    <Text style={{ color: 'red', fontWeight: '700', fontSize: 14 }}>{message}</Text>
                            }
                            <Dialog.Button label="Cancel" onPress={handleCancel} style={customstyles.btnRedxs} />
                            <Dialog.Button label="Submit" onPress={validateInput} style={{ ...customstyles.btnThemexs, ...customstyles.ml5 }} />
                        </Dialog.Container>
                    </View>

                </View>

                <View style={styles.col2}>
                    <View style={{ ...customstyles.row, }}>
                        {
                            generalFolder ?
                                generalFolder.map((items, i) => (
                                    <View style={{ ...customstyles.col6, ...customstyles.p10, }} key={i}>
                                        <LinearGradient colors={['#663792', '#3d418b', '#0a4487']} start={{ x: 0.2, y: 0.5 }} end={{ x: 1, y: 1.3 }} style={styles.gradientbtn} >
                                            <TouchableOpacity
                                                onPress={() => navigation.navigate('ShowDocs', { user_id: 19, folder_id: items.id, folder_name: items.folder_name })}>
                                                <Text style={{ ...customstyles.w100, ...customstyles.textCenter, ...customstyles.textwhite, ...customstyles.textmd }}>{items.folder_name} </Text>
                                            </TouchableOpacity>
                                        </LinearGradient>
                                    </View>
                                ))
                                : ''
                        }
                    </View>

                    <View style={{ ...customstyles.row, ...customstyles.mb25 }}>
                        {
                            (userFolder !== null) &&
                            userFolder.map((item, j) => (
                                <View key={j} style={{ ...customstyles.col6, ...customstyles.p10, ...customstyles.prelative }}>
                                    <LinearGradient colors={['#663792', '#3d418b', '#0a4487']} start={{ x: 0.2, y: 0.5 }} end={{ x: 1, y: 1.3 }} style={styles.gradientbtn} >
                                        <TouchableOpacity key={j}
                                            onPress={() => navigation.navigate('ShowDocs', { user_id: 19, folder_id: item.id, folder_name: item.folder_name })}>
                                            <Text style={{ ...customstyles.w100, ...customstyles.textCenter, ...customstyles.textwhite, ...customstyles.textmd }}>{item.folder_name}</Text>
                                        </TouchableOpacity>

                                        <View key={item.id} style={{ ...customstyles.upright, ...{ top: -10, right: -10 } }}>
                                            <TouchableOpacity style={{ ...customstyles.uprightDelete }} onPress={() => { deleteFolder(item.id) }} >
                                                <Ionicons name="close-outline" size={24} color="white" />
                                            </TouchableOpacity>
                                        </View>
                                    </LinearGradient>
                                </View>
                            ))
                        }
                    </View>
                </View>
            </ScrollView>
        </SafeAreaView >
    )
}

const styles = StyleSheet.create({
    scrollArea: {
        flex: 1,
        width: "100%",
        backgroundColor: "white",
        // paddingTop: StatusBar.currentHeight,
    },
    header: {
        paddingTop: StatusBar.currentHeight,
    },
    innerView: {
        height: "100%",
        paddingHorizontal: 15,
    },
    container: {
        flex: 1,
        justifyContent: 'center',
    },
    col2: {
        flex: 2,
        justifyContent: 'center',
        marginBottom: 30,
    },
    gradientbtn: {
        height: 90,
        borderRadius: 5,
        // overflow: "hidden",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        padding: 5,
    }
});
export default Info;