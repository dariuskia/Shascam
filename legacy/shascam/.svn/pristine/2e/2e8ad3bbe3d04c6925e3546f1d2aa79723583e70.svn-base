{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { Picker } from \"@react-native-picker/picker\";\nimport { customstyles } from \"../customstyle\";\nimport { NewregisterAPI, getTitles, getIdTypes, getMobileCountry, getNationalities } from \"./functions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fname: '',\n      lname: '',\n      reg_email: '',\n      phone: '',\n      password: '',\n      conf_pass: '',\n      fname_err: '',\n      lname_err: '',\n      email_err: '',\n      phone_err: '',\n      password_err: '',\n      conf_pass_err: '',\n      title: '',\n      api_resp: ''\n    };\n\n    _this.getUserTitle = function () {\n      console.log('getTitles');\n      var resp = getTitles().then(function (resp) {\n        var result = resp.data;\n        console.log(result);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.register = function _callee() {\n      var data, response;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = {\n                fname: _this.state.fname,\n                lname: _this.state.lname,\n                email: _this.state.reg_email,\n                phone: _this.state.phone,\n                password: _this.state.password,\n                platform: Platform.OS\n              };\n              console.log(data);\n              response = NewregisterAPI(data).then(function (res) {\n                console.log(res);\n                var message = res.message;\n                var status = res.status;\n\n                if (status == 2) {\n                  _this.setState({\n                    api_resp: message\n                  });\n\n                  setTimeout(function () {\n                    _this.setState({\n                      api_resp: ''\n                    });\n                  }, 5000);\n                } else {\n                  _this.setState({\n                    api_resp: message\n                  });\n\n                  setTimeout(function () {\n                    _this.setState({\n                      api_resp: ''\n                    });\n                  }, 3000);\n                  setTimeout(function () {\n                    _this.props.navigation.navigate('LoginScreen');\n                  }, 5000);\n                }\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getUserTitle();\n    }\n  }, {\n    key: \"setTitle\",\n    value: function setTitle(value) {\n      console.log(value);\n      this.setState({\n        title: value\n      });\n    }\n  }, {\n    key: \"validateInput\",\n    value: function validateInput() {\n      var _this$state = this.state,\n          fname = _this$state.fname,\n          lname = _this$state.lname,\n          reg_email = _this$state.reg_email,\n          phone = _this$state.phone,\n          password = _this$state.password,\n          conf_pass = _this$state.conf_pass;\n      var pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w\\w+)+$/;\n\n      if (fname == '') {\n        this.setState({\n          fname_err: 'First name is required'\n        });\n        return;\n      } else {\n        this.setState({\n          fname_err: ''\n        });\n      }\n\n      if (lname == '') {\n        this.setState({\n          lname_err: 'Last name is required'\n        });\n        return;\n      } else {\n        this.setState({\n          lname_err: ''\n        });\n      }\n\n      if (reg_email == '') {\n        this.setState({\n          email_err: 'Email is required'\n        });\n        return;\n      } else {\n        this.setState({\n          email_err: ''\n        });\n      }\n\n      if (pattern.test(reg_email) === false) {\n        this.setState({\n          email_err: 'Email is not valid'\n        });\n        return;\n      } else {\n        this.setState({\n          email_err: ''\n        });\n      }\n\n      if (phone == '') {\n        this.setState({\n          phone_err: 'Phone no is required'\n        });\n        return;\n      } else {\n        this.setState({\n          phone_err: ''\n        });\n      }\n\n      if (password == '') {\n        this.setState({\n          password_err: 'Password is required'\n        });\n        return;\n      } else {\n        this.setState({\n          password_err: ''\n        });\n      }\n\n      if (conf_pass == '') {\n        this.setState({\n          conf_pass_err: 'Confirm Password is required'\n        });\n        return;\n      } else {\n        this.setState({\n          conf_pass_err: ''\n        });\n      }\n\n      if (password != conf_pass) {\n        this.setState({\n          password_err: 'Confirm Password & Password does not match'\n        });\n        return;\n      } else {\n        this.setState({\n          password_err: ''\n        });\n      }\n\n      if (fname != '' && lname != '' && reg_email != '' && phone != '' && password != '' && conf_pass != '') {\n        this.register();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsx(LinearGradient, {\n        colors: ['#663792', '#3d418b', '#0a4487'],\n        start: {\n          x: 0,\n          y: .5\n        },\n        end: {\n          x: 1,\n          y: 1\n        },\n        style: styles.linearGradient,\n        children: _jsx(SafeAreaView, {\n          children: _jsx(ScrollView, {\n            children: _jsxs(View, {\n              style: styles.logincontainer,\n              children: [_jsx(Text, {\n                style: customstyles.headingWhite,\n                children: \"Signup\"\n              }), _jsx(Text, {\n                children: this.state.api_resp\n              }), _jsx(Text, {\n                style: {\n                  color: '#fff'\n                },\n                children: \"Select Title\"\n              }), _jsxs(Picker, {\n                selectedValue: this.state.title,\n                onValueChange: function onValueChange(value, index) {\n                  return _this2.setTitle(value);\n                },\n                mode: \"dropdown\",\n                style: styles.picker,\n                children: [_jsx(Picker.Item, {\n                  label: \"Please select your country\",\n                  value: \"Unknown\"\n                }), _jsx(Picker.Item, {\n                  label: \"Australia\",\n                  value: \"Australia\"\n                }), _jsx(Picker.Item, {\n                  label: \"Belgium\",\n                  value: \"Belgium\"\n                }), _jsx(Picker.Item, {\n                  label: \"Canada\",\n                  value: \"Canada\"\n                }), _jsx(Picker.Item, {\n                  label: \"India\",\n                  value: \"India\"\n                }), _jsx(Picker.Item, {\n                  label: \"Japan\",\n                  value: \"Japan\"\n                })]\n              }), _jsx(TextInput, {\n                value: this.state.fname,\n                onChangeText: function onChangeText(fname) {\n                  return _this2.setState({\n                    fname: fname\n                  });\n                },\n                placeholder: 'Enter First Name',\n                style: customstyles.input,\n                placeholderTextColor: \"#fff\"\n              }), _jsx(Text, {\n                style: this.state.fname_err ? customstyles.alertdanger : '',\n                children: this.state.fname_err\n              }), _jsx(TextInput, {\n                value: this.state.lname,\n                onChangeText: function onChangeText(lname) {\n                  return _this2.setState({\n                    lname: lname\n                  });\n                },\n                placeholder: 'Enter Last Name',\n                style: customstyles.input,\n                placeholderTextColor: \"#fff\"\n              }), _jsx(Text, {\n                style: this.state.lname_err ? customstyles.alertdanger : '',\n                children: this.state.lname_err\n              }), _jsx(TextInput, {\n                value: this.state.reg_email,\n                onChangeText: function onChangeText(reg_email) {\n                  return _this2.setState({\n                    reg_email: reg_email\n                  });\n                },\n                placeholder: 'Enter Email',\n                style: customstyles.input,\n                placeholderTextColor: \"#fff\"\n              }), _jsx(Text, {\n                style: this.state.email_err ? customstyles.alertdanger : '',\n                children: this.state.email_err\n              }), _jsx(Text, {\n                style: {\n                  color: '#fff'\n                },\n                children: \"Select Country Code\"\n              }), _jsxs(Picker, {\n                onValueChange: function onValueChange(value, index) {\n                  return setCountry(value);\n                },\n                mode: \"dropdown\",\n                style: styles.picker,\n                children: [_jsx(Picker.Item, {\n                  label: \"Please select your country\",\n                  value: \"Unknown\"\n                }), _jsx(Picker.Item, {\n                  label: \"Australia\",\n                  value: \"Australia\"\n                }), _jsx(Picker.Item, {\n                  label: \"Belgium\",\n                  value: \"Belgium\"\n                }), _jsx(Picker.Item, {\n                  label: \"Canada\",\n                  value: \"Canada\"\n                }), _jsx(Picker.Item, {\n                  label: \"India\",\n                  value: \"India\"\n                }), _jsx(Picker.Item, {\n                  label: \"Japan\",\n                  value: \"Japan\"\n                })]\n              }), _jsx(TextInput, {\n                value: this.state.phone,\n                keyboardType: 'numeric',\n                onChangeText: function onChangeText(phone) {\n                  return _this2.setState({\n                    phone: phone\n                  });\n                },\n                placeholder: 'Enter Phone No',\n                style: customstyles.input,\n                placeholderTextColor: \"#fff\"\n              }), _jsx(Text, {\n                style: this.state.phone_err ? customstyles.alertdanger : '',\n                children: this.state.phone_err\n              }), _jsx(Text, {\n                style: {\n                  color: '#fff'\n                },\n                children: \"Select Nationality\"\n              }), _jsxs(Picker, {\n                onValueChange: function onValueChange(value, index) {\n                  return setCountry(value);\n                },\n                mode: \"dropdown\",\n                style: styles.picker,\n                children: [_jsx(Picker.Item, {\n                  label: \"Please select your country\",\n                  value: \"Unknown\"\n                }), _jsx(Picker.Item, {\n                  label: \"Australia\",\n                  value: \"Australia\"\n                }), _jsx(Picker.Item, {\n                  label: \"Belgium\",\n                  value: \"Belgium\"\n                }), _jsx(Picker.Item, {\n                  label: \"Canada\",\n                  value: \"Canada\"\n                }), _jsx(Picker.Item, {\n                  label: \"India\",\n                  value: \"India\"\n                }), _jsx(Picker.Item, {\n                  label: \"Japan\",\n                  value: \"Japan\"\n                })]\n              }), _jsx(TextInput, {\n                value: this.state.password,\n                secureTextEntry: true,\n                onChangeText: function onChangeText(password) {\n                  return _this2.setState({\n                    password: password\n                  });\n                },\n                placeholder: 'Enter Pasword',\n                style: customstyles.input,\n                placeholderTextColor: \"#fff\"\n              }), _jsx(Text, {\n                style: this.state.password_err ? customstyles.alertdanger : '',\n                children: this.state.password_err\n              }), _jsx(TextInput, {\n                value: this.state.conf_pass,\n                secureTextEntry: true,\n                onChangeText: function onChangeText(conf_pass) {\n                  return _this2.setState({\n                    conf_pass: conf_pass\n                  });\n                },\n                placeholder: 'Enter Confirm Password',\n                style: customstyles.input,\n                placeholderTextColor: \"#fff\"\n              }), _jsx(Text, {\n                style: this.state.conf_pass_err ? customstyles.alertdanger : '',\n                children: this.state.conf_pass_err\n              }), _jsx(Text, {\n                style: {\n                  color: '#fff'\n                },\n                children: \"Select Id Types\"\n              }), _jsxs(Picker, {\n                onValueChange: function onValueChange(value, index) {\n                  return setCountry(value);\n                },\n                mode: \"dropdown\",\n                style: styles.picker,\n                children: [_jsx(Picker.Item, {\n                  label: \"Please select your country\",\n                  value: \"Unknown\"\n                }), _jsx(Picker.Item, {\n                  label: \"Australia\",\n                  value: \"Australia\"\n                }), _jsx(Picker.Item, {\n                  label: \"Belgium\",\n                  value: \"Belgium\"\n                }), _jsx(Picker.Item, {\n                  label: \"Canada\",\n                  value: \"Canada\"\n                }), _jsx(Picker.Item, {\n                  label: \"India\",\n                  value: \"India\"\n                }), _jsx(Picker.Item, {\n                  label: \"Japan\",\n                  value: \"Japan\"\n                })]\n              }), _jsx(TextInput, {\n                secureTextEntry: true,\n                placeholder: 'Enter Id Type',\n                style: customstyles.input,\n                placeholderTextColor: \"#fff\"\n              }), _jsx(TouchableOpacity, {\n                onPress: this.validateInput.bind(this),\n                children: _jsxs(View, {\n                  style: _objectSpread(_objectSpread({}, styles.button), {}, {\n                    backgroundColor: this.state.isLoading ? \"#fff\" : \"#FFF\"\n                  }),\n                  children: [_jsx(Text, {\n                    style: styles.buttonText,\n                    children: this.state.isLoading ? \"SENDING...\" : \"SUBMIT\"\n                  }), this.state.isLoading && _jsx(ActivityIndicator, {\n                    size: \"large\",\n                    color: \"#663792\"\n                  })]\n                })\n              })]\n            })\n          })\n        })\n      });\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1'\n  },\n  linearGradient: {\n    flex: 1,\n    height: \"100%\",\n    justifyContent: \"center\",\n    padding: 30\n  },\n  input: {\n    width: 200,\n    height: 44,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: 'black',\n    marginBottom: 10\n  },\n  button: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n    padding: 10,\n    marginBottom: 20,\n    borderRadius: 30\n  },\n  buttonText: {\n    color: \"#663792\",\n    fontWeight: \"bold\",\n    fontSize: 20\n  },\n  picker: {\n    marginVertical: 30,\n    width: 300,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: \"#fff\",\n    color: '#fff'\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["D:/IdentityWallet/components/Signup.js"],"names":["React","Component","LinearGradient","Picker","customstyles","NewregisterAPI","getTitles","getIdTypes","getMobileCountry","getNationalities","LoginScreen","props","state","fname","lname","reg_email","phone","password","conf_pass","fname_err","lname_err","email_err","phone_err","password_err","conf_pass_err","title","api_resp","getUserTitle","console","log","resp","then","result","data","catch","error","register","email","platform","Platform","OS","response","res","message","status","setState","setTimeout","navigation","navigate","value","pattern","test","x","y","styles","linearGradient","logincontainer","headingWhite","color","index","setTitle","picker","input","alertdanger","setCountry","validateInput","bind","button","backgroundColor","isLoading","buttonText","StyleSheet","create","container","flex","alignItems","justifyContent","height","padding","width","borderWidth","borderColor","marginBottom","display","flexDirection","borderRadius","fontWeight","fontSize","marginVertical"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Alert, Button, TextInput, View, StyleSheet, Text, TouchableOpacity, ScrollView, SafeAreaView } from 'react-native';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport { customstyles } from \"../customstyle\";\r\nimport { NewregisterAPI, getTitles, getIdTypes, getMobileCountry, getNationalities } from './functions';\r\nclass LoginScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        fname: '',\r\n        lname: '',\r\n        reg_email: '',\r\n        phone: '',\r\n        password: '',\r\n        conf_pass: '',\r\n\r\n        fname_err: '',\r\n        lname_err: '',\r\n        email_err: '',\r\n        phone_err: '',\r\n        password_err: '',\r\n        conf_pass_err: '',\r\n\r\n        title: '',\r\n\r\n        api_resp: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUserTitle();\r\n        // this.getIdTypes();\r\n        // this.getMobileCountry();\r\n        // this.getNationalities();\r\n    }\r\n\r\n    // Dropdown List\r\n    getUserTitle = () => {\r\n        console.log('getTitles');\r\n        var resp = getTitles()\r\n            .then(resp => {\r\n                let result = resp.data;\r\n                console.log(result);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n    // Close\r\n\r\n\r\n\r\n    // Dropdoewn handling\r\n    setTitle(value) {\r\n        console.log(value);\r\n        this.setState({\r\n            title: value\r\n        })\r\n    }\r\n    // Close\r\n\r\n\r\n    validateInput() {\r\n        const { fname, lname, reg_email, phone, password, conf_pass } = this.state;\r\n        let pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w\\w+)+$/;\r\n        //Alert.alert('Credentials', `${username} + ${password}`);\r\n        if ((fname == '')) {\r\n            this.setState({\r\n                fname_err: 'First name is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                fname_err: ''\r\n            })\r\n        }\r\n\r\n        if ((lname == '')) {\r\n            this.setState({\r\n                lname_err: 'Last name is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                lname_err: ''\r\n            })\r\n        }\r\n\r\n        if ((reg_email == '')) {\r\n            this.setState({\r\n                email_err: 'Email is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                email_err: ''\r\n            })\r\n        }\r\n\r\n        if (pattern.test(reg_email) === false) {\r\n            this.setState({\r\n                email_err: 'Email is not valid'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                email_err: ''\r\n            })\r\n        }\r\n\r\n        if ((phone == '')) {\r\n            this.setState({\r\n                phone_err: 'Phone no is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                phone_err: ''\r\n            })\r\n        }\r\n\r\n        if ((password == '')) {\r\n            this.setState({\r\n                password_err: 'Password is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                password_err: ''\r\n            })\r\n        }\r\n\r\n        if ((conf_pass == '')) {\r\n            this.setState({\r\n                conf_pass_err: 'Confirm Password is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                conf_pass_err: ''\r\n            })\r\n        }\r\n\r\n        if ((password != conf_pass)) {\r\n            this.setState({\r\n                password_err: 'Confirm Password & Password does not match'\r\n            })\r\n            return;\r\n        }\r\n        else {\r\n            this.setState({\r\n                password_err: ''\r\n            })\r\n        }\r\n\r\n        if ((fname != '') && (lname != '') && (reg_email != '') && (phone != '') && (password != '') && (conf_pass != '')) {\r\n            this.register();\r\n        }\r\n    }\r\n\r\n    register = async () => {\r\n        let data = {\r\n            fname: this.state.fname,\r\n            lname: this.state.lname,\r\n            email: this.state.reg_email,\r\n            phone: this.state.phone,\r\n            password: this.state.password,\r\n            platform: Platform.OS\r\n        }\r\n\r\n        console.log(data);\r\n        var response = NewregisterAPI(data)\r\n            .then(res => {\r\n                console.log(res);\r\n                let message = res.message;\r\n                let status = res.status;\r\n\r\n                if ((status == 2)) {\r\n                    //Alert.alert(message);\r\n                    this.setState({\r\n                        api_resp: message\r\n                    });\r\n                    setTimeout(() => {\r\n                        this.setState({\r\n                            api_resp: '',\r\n                        });\r\n                    }, 5000);\r\n                } else {\r\n                    //Alert.alert(message);\r\n                    this.setState({\r\n                        api_resp: message\r\n                    });\r\n                    setTimeout(() => {\r\n                        this.setState({\r\n                            api_resp: '',\r\n                        })\r\n                    }, 3000);\r\n                    setTimeout(() => {\r\n                        this.props.navigation.navigate('LoginScreen');\r\n                    }, 5000);\r\n                }\r\n            })\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <LinearGradient colors={['#663792', '#3d418b', '#0a4487']} start={{ x: 0, y: .5 }} end={{ x: 1, y: 1 }} style={styles.linearGradient}\r\n            >\r\n                <SafeAreaView>\r\n                    <ScrollView>\r\n                        <View style={styles.logincontainer}>\r\n                            <Text style={customstyles.headingWhite}>Signup</Text>\r\n\r\n                            <Text>{this.state.api_resp}</Text>\r\n                            <Text style={{ color: '#fff' }}>Select Title</Text>\r\n\r\n                            <Picker\r\n                                selectedValue={this.state.title}\r\n                                onValueChange={(value, index) => this.setTitle(value)}\r\n                                mode=\"dropdown\" // Android only\r\n                                style={styles.picker}\r\n                            >\r\n                                <Picker.Item label=\"Please select your country\" value=\"Unknown\" />\r\n                                <Picker.Item label=\"Australia\" value=\"Australia\" />\r\n                                <Picker.Item label=\"Belgium\" value=\"Belgium\" />\r\n                                <Picker.Item label=\"Canada\" value=\"Canada\" />\r\n                                <Picker.Item label=\"India\" value=\"India\" />\r\n                                <Picker.Item label=\"Japan\" value=\"Japan\" />\r\n                            </Picker>\r\n\r\n                            <TextInput\r\n                                value={this.state.fname}\r\n                                onChangeText={(fname) => this.setState({ fname })}\r\n                                placeholder={'Enter First Name'}\r\n                                style={customstyles.input}\r\n                                placeholderTextColor=\"#fff\"\r\n                            />\r\n                            <Text style={this.state.fname_err ? customstyles.alertdanger : ''}>{this.state.fname_err}</Text>\r\n\r\n                            <TextInput\r\n                                value={this.state.lname}\r\n                                onChangeText={(lname) => this.setState({ lname })}\r\n                                placeholder={'Enter Last Name'}\r\n                                style={customstyles.input}\r\n                                placeholderTextColor=\"#fff\"\r\n                            />\r\n                            <Text style={this.state.lname_err ? customstyles.alertdanger : ''}>{this.state.lname_err}</Text>\r\n\r\n                            <TextInput\r\n                                value={this.state.reg_email}\r\n                                onChangeText={(reg_email) => this.setState({ reg_email })}\r\n                                placeholder={'Enter Email'}\r\n                                style={customstyles.input}\r\n                                placeholderTextColor=\"#fff\"\r\n                            />\r\n                            <Text style={this.state.email_err ? customstyles.alertdanger : ''}>{this.state.email_err}</Text>\r\n\r\n                            <Text style={{ color: '#fff' }}>Select Country Code</Text>\r\n                            <Picker\r\n                                //selectedValue='Test'\r\n                                onValueChange={(value, index) => setCountry(value)}\r\n                                mode=\"dropdown\" // Android only\r\n                                style={styles.picker}\r\n                            >\r\n                                <Picker.Item label=\"Please select your country\" value=\"Unknown\" />\r\n                                <Picker.Item label=\"Australia\" value=\"Australia\" />\r\n                                <Picker.Item label=\"Belgium\" value=\"Belgium\" />\r\n                                <Picker.Item label=\"Canada\" value=\"Canada\" />\r\n                                <Picker.Item label=\"India\" value=\"India\" />\r\n                                <Picker.Item label=\"Japan\" value=\"Japan\" />\r\n                            </Picker>\r\n\r\n\r\n                            <TextInput\r\n                                value={this.state.phone}\r\n                                keyboardType={'numeric'}\r\n                                onChangeText={(phone) => this.setState({ phone })}\r\n                                placeholder={'Enter Phone No'}\r\n                                style={customstyles.input}\r\n                                placeholderTextColor=\"#fff\"\r\n                            />\r\n                            <Text style={this.state.phone_err ? customstyles.alertdanger : ''}>{this.state.phone_err}</Text>\r\n\r\n                            <Text style={{ color: '#fff' }}>Select Nationality</Text>\r\n\r\n                            <Picker\r\n                                //selectedValue='Test'\r\n                                onValueChange={(value, index) => setCountry(value)}\r\n                                mode=\"dropdown\" // Android only\r\n                                style={styles.picker}\r\n                            >\r\n                                <Picker.Item label=\"Please select your country\" value=\"Unknown\" />\r\n                                <Picker.Item label=\"Australia\" value=\"Australia\" />\r\n                                <Picker.Item label=\"Belgium\" value=\"Belgium\" />\r\n                                <Picker.Item label=\"Canada\" value=\"Canada\" />\r\n                                <Picker.Item label=\"India\" value=\"India\" />\r\n                                <Picker.Item label=\"Japan\" value=\"Japan\" />\r\n                            </Picker>\r\n\r\n\r\n                            <TextInput\r\n                                value={this.state.password}\r\n                                secureTextEntry={true}\r\n                                onChangeText={(password) => this.setState({ password })}\r\n                                placeholder={'Enter Pasword'}\r\n                                style={customstyles.input}\r\n                                placeholderTextColor=\"#fff\"\r\n                            />\r\n                            <Text style={this.state.password_err ? customstyles.alertdanger : ''}>{this.state.password_err}</Text>\r\n\r\n                            <TextInput\r\n                                value={this.state.conf_pass}\r\n                                secureTextEntry={true}\r\n                                onChangeText={(conf_pass) => this.setState({ conf_pass })}\r\n                                placeholder={'Enter Confirm Password'}\r\n                                style={customstyles.input}\r\n                                placeholderTextColor=\"#fff\"\r\n                            />\r\n                            <Text style={this.state.conf_pass_err ? customstyles.alertdanger : ''}>{this.state.conf_pass_err}</Text>\r\n\r\n                            <Text style={{ color: '#fff' }}>Select Id Types</Text>\r\n                            <Picker\r\n                                //selectedValue='Test'\r\n                                onValueChange={(value, index) => setCountry(value)}\r\n                                mode=\"dropdown\" // Android only\r\n                                style={styles.picker}\r\n                            >\r\n                                <Picker.Item label=\"Please select your country\" value=\"Unknown\" />\r\n                                <Picker.Item label=\"Australia\" value=\"Australia\" />\r\n                                <Picker.Item label=\"Belgium\" value=\"Belgium\" />\r\n                                <Picker.Item label=\"Canada\" value=\"Canada\" />\r\n                                <Picker.Item label=\"India\" value=\"India\" />\r\n                                <Picker.Item label=\"Japan\" value=\"Japan\" />\r\n                            </Picker>\r\n\r\n\r\n                            <TextInput\r\n                                //value={this.state.conf_pass}\r\n                                secureTextEntry={true}\r\n                                //onChangeText={(conf_pass) => this.setState({ conf_pass })}\r\n                                placeholder={'Enter Id Type'}\r\n                                style={customstyles.input}\r\n                                placeholderTextColor=\"#fff\"\r\n                            />\r\n                            {/* <Text style={this.state.conf_pass_err ? customstyles.alertdanger : ''}>{this.state.conf_pass_err}</Text> */}\r\n\r\n\r\n\r\n                            <TouchableOpacity onPress={this.validateInput.bind(this)}>\r\n                                <View\r\n                                    style={{\r\n                                        ...styles.button,\r\n                                        backgroundColor: this.state.isLoading ? \"#fff\" : \"#FFF\",\r\n                                    }}\r\n                                >\r\n                                    <Text style={styles.buttonText}>\r\n                                        {this.state.isLoading ? \"SENDING...\" : \"SUBMIT\"}\r\n                                    </Text>\r\n                                    {this.state.isLoading && <ActivityIndicator size=\"large\" color=\"#663792\" />}\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </ScrollView>\r\n                </SafeAreaView>\r\n            </LinearGradient>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#ecf0f1',\r\n    },\r\n    linearGradient: {\r\n        flex: 1,\r\n        height: \"100%\",\r\n        justifyContent: \"center\",\r\n        padding: 30,\r\n    },\r\n    input: {\r\n        width: 200,\r\n        height: 44,\r\n        padding: 10,\r\n        borderWidth: 1,\r\n        borderColor: 'black',\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-evenly\",\r\n        alignItems: \"center\",\r\n        padding: 10,\r\n        marginBottom: 20,\r\n        borderRadius: 30,\r\n    },\r\n    buttonText: {\r\n        color: \"#663792\",\r\n        fontWeight: \"bold\",\r\n        fontSize: 20\r\n    },\r\n    picker: {\r\n        marginVertical: 30,\r\n        width: 300,\r\n        padding: 10,\r\n        borderWidth: 1,\r\n        borderColor: \"#fff\",\r\n        color: '#fff'\r\n    },\r\n\r\n});\r\n\r\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}