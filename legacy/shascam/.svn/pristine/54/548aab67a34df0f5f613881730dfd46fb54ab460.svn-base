{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { customstyles } from \"../customstyle\";\nimport { forgotPassword } from \"./functions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Forgot() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var toggleLoading = function toggleLoading() {\n    setIsLoading(!isLoading);\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(TouchableOpacity, {\n      onPress: toggleLoading,\n      children: _jsxs(View, {\n        style: _objectSpread(_objectSpread({}, styles.button), {}, {\n          backgroundColor: isLoading ? \"#4caf50\" : \"#8bc34a\"\n        }),\n        children: [isLoading && _jsx(ActivityIndicator, {\n          size: \"large\",\n          color: \"yellow\"\n        }), _jsx(Text, {\n          style: styles.buttonText,\n          children: isLoading ? \"Stop Loading\" : \"Start Loading\"\n        })]\n      })\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  screenContainer: {\n    flex: 1,\n    justifyContent: \"center\"\n  },\n  linearGradient: {\n    flex: 1,\n    height: \"100%\",\n    justifyContent: \"center\",\n    padding: 30\n  },\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1'\n  },\n  input: {\n    width: 200,\n    height: 44,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: 'black',\n    marginBottom: 10\n  },\n  appButtonContainer: {\n    elevation: 8,\n    backgroundColor: \"#fff\",\n    borderRadius: 30,\n    paddingVertical: 15,\n    marginTop: 10,\n    marginBottom: 10,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: -2,\n      height: 6\n    },\n    shadowOpacity: 0.4,\n    shadowRadius: 7\n  }\n});\nexport default Forgot;","map":{"version":3,"sources":["D:/IdentityWallet/components/Forgot.js"],"names":["React","useState","LinearGradient","customstyles","forgotPassword","Forgot","isLoading","setIsLoading","toggleLoading","styles","container","button","backgroundColor","buttonText","StyleSheet","create","screenContainer","flex","justifyContent","linearGradient","height","padding","alignItems","input","width","borderWidth","borderColor","marginBottom","appButtonContainer","elevation","borderRadius","paddingVertical","marginTop","shadowColor","shadowOffset","shadowOpacity","shadowRadius"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;;;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,YAAT;AACA,SAASC,cAAT;;;;AAGA,SAASC,MAAT,GAAkB;AACd,kBAAkCJ,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOK,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBD,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH,GAFD;;AAIA,SACI,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA,cACI,KAAC,gBAAD;AAAkB,MAAA,OAAO,EAAEF,aAA3B;AAAA,gBACI,MAAC,IAAD;AACI,QAAA,KAAK,kCACEC,MAAM,CAACE,MADT;AAEDC,UAAAA,eAAe,EAAEN,SAAS,GAAG,SAAH,GAAe;AAFxC,UADT;AAAA,mBAMKA,SAAS,IAAI,KAAC,iBAAD;AAAmB,UAAA,IAAI,EAAC,OAAxB;AAAgC,UAAA,KAAK,EAAC;AAAtC,UANlB,EAOI,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEG,MAAM,CAACI,UAApB;AAAA,oBACKP,SAAS,GAAG,cAAH,GAAoB;AADlC,UAPJ;AAAA;AADJ;AADJ,IADJ;AAiBH;;AAMD,IAAMG,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,eAAe,EAAE;AACbC,IAAAA,IAAI,EAAE,CADO;AAEbC,IAAAA,cAAc,EAAE;AAFH,GADY;AAK7BC,EAAAA,cAAc,EAAE;AACZF,IAAAA,IAAI,EAAE,CADM;AAEZG,IAAAA,MAAM,EAAE,MAFI;AAGZF,IAAAA,cAAc,EAAE,QAHJ;AAIZG,IAAAA,OAAO,EAAE;AAJG,GALa;AAW7BX,EAAAA,SAAS,EAAE;AACPO,IAAAA,IAAI,EAAE,CADC;AAEPK,IAAAA,UAAU,EAAE,QAFL;AAGPJ,IAAAA,cAAc,EAAE,QAHT;AAIPN,IAAAA,eAAe,EAAE;AAJV,GAXkB;AAiB7BW,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAE,GADJ;AAEHJ,IAAAA,MAAM,EAAE,EAFL;AAGHC,IAAAA,OAAO,EAAE,EAHN;AAIHI,IAAAA,WAAW,EAAE,CAJV;AAKHC,IAAAA,WAAW,EAAE,OALV;AAMHC,IAAAA,YAAY,EAAE;AANX,GAjBsB;AAyB7BC,EAAAA,kBAAkB,EAAE;AAChBC,IAAAA,SAAS,EAAE,CADK;AAEhBjB,IAAAA,eAAe,EAAE,MAFD;AAGhBkB,IAAAA,YAAY,EAAE,EAHE;AAIhBC,IAAAA,eAAe,EAAE,EAJD;AAMhBC,IAAAA,SAAS,EAAE,EANK;AAOhBL,IAAAA,YAAY,EAAE,EAPE;AAQhBM,IAAAA,WAAW,EAAE,MARG;AAShBC,IAAAA,YAAY,EAAE;AAAEV,MAAAA,KAAK,EAAE,CAAC,CAAV;AAAaJ,MAAAA,MAAM,EAAE;AAArB,KATE;AAUhBe,IAAAA,aAAa,EAAE,GAVC;AAWhBC,IAAAA,YAAY,EAAE;AAXE;AAzBS,CAAlB,CAAf;AAwCA,eAAe/B,MAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { Alert, Button, TextInput, View, StyleSheet, Text, ToastAndroid, ActivityIndicator, TouchableOpacity } from 'react-native';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { customstyles } from \"../customstyle\";\r\nimport { forgotPassword } from './functions';\r\n// import axios from 'axios';\r\n\r\nfunction Forgot() {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    // This function will be triggered when the button is pressed\r\n    const toggleLoading = () => {\r\n        setIsLoading(!isLoading);\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <TouchableOpacity onPress={toggleLoading}>\r\n                <View\r\n                    style={{\r\n                        ...styles.button,\r\n                        backgroundColor: isLoading ? \"#4caf50\" : \"#8bc34a\",\r\n                    }}\r\n                >\r\n                    {isLoading && <ActivityIndicator size=\"large\" color=\"yellow\" />}\r\n                    <Text style={styles.buttonText}>\r\n                        {isLoading ? \"Stop Loading\" : \"Start Loading\"}\r\n                    </Text>\r\n                </View>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    screenContainer: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n    },\r\n    linearGradient: {\r\n        flex: 1,\r\n        height: \"100%\",\r\n        justifyContent: \"center\",\r\n        padding: 30,\r\n    },\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#ecf0f1',\r\n    },\r\n    input: {\r\n        width: 200,\r\n        height: 44,\r\n        padding: 10,\r\n        borderWidth: 1,\r\n        borderColor: 'black',\r\n        marginBottom: 10,\r\n    },\r\n    appButtonContainer: {\r\n        elevation: 8,\r\n        backgroundColor: \"#fff\",\r\n        borderRadius: 30,\r\n        paddingVertical: 15,\r\n        // paddingHorizontal: 12,\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n        shadowColor: '#000',\r\n        shadowOffset: { width: -2, height: 6 },\r\n        shadowOpacity: 0.4,\r\n        shadowRadius: 7,\r\n    },\r\n});\r\n\r\nexport default Forgot;"]},"metadata":{},"sourceType":"module"}