{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { Ionicons } from '@expo/vector-icons';\nimport Loader from \"./Loader\";\nimport RadioButtonRN from 'radio-buttons-react-native-expo';\nimport Checkbox from 'expo-checkbox';\nimport { customstyles } from \"../customstyle\";\nimport { getRandomQuestion, getUserAnswer } from \"../components/functions.js\";\nimport * as DocumentPicker from 'expo-document-picker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Question = function (_Component) {\n  _inherits(Question, _Component);\n\n  var _super = _createSuper(Question);\n\n  function Question() {\n    var _this;\n\n    _classCallCheck(this, Question);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      user_submission_id: '',\n      DataisLoaded: false,\n      Questions: [],\n      Question_type: [],\n      clicked: false,\n      text_input: '',\n      radio_btn: '',\n      number_text: '',\n      api_resp: '',\n      image_base64: '',\n      selectedCheckboxes: [],\n      questionOptions: []\n    };\n\n    _this.getRandomQuestion = function (userId) {\n      var resp = getRandomQuestion(userId).then(function (resp) {\n        var result = resp.data;\n        var options = result[0].question_options;\n\n        _this.setState({\n          Questions: result,\n          questionOptions: options,\n          DataisLoaded: true\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.startQuiz = function () {\n      _this.setState({\n        clicked: true\n      });\n    };\n\n    _this.pickDocument = function _callee() {\n      var result, image_base64;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(DocumentPicker.getDocumentAsync({}));\n\n            case 2:\n              result = _context.sent;\n              image_base64 = result.uri;\n\n              _this.setState({\n                image_base64: image_base64\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.qusSkip = function (qus_id) {\n      var ques_id = qus_id;\n      var userId = _this.state.user_submission_id;\n      var is_interested = '0';\n      var data = {\n        user_id: userId,\n        question_id: ques_id,\n        is_interested: is_interested\n      };\n\n      _this.setState({\n        DataisLoaded: false\n      });\n\n      var resp = getUserAnswer(data).then(function (resp) {\n        var result = resp;\n        var status = result.status;\n        var message = result.message;\n\n        if (status === 1) {\n          _this.setState({\n            DataisLoaded: true,\n            number_text: '',\n            text_input: '',\n            radio_btn: '',\n            selectedCheckboxes: [],\n            image_base64: ''\n          });\n\n          _this.getRandomQuestion(userId);\n        } else {}\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.onChange = function (id) {\n      _this.setState({\n        is_val_checked: !_this.state.is_val_checked\n      });\n\n      var selectedCheckboxes = _this.state.selectedCheckboxes;\n      var findIdx = selectedCheckboxes.indexOf(id);\n\n      if (findIdx > -1) {\n        selectedCheckboxes.splice(findIdx, 1);\n      } else {\n        selectedCheckboxes.push(id);\n      }\n\n      _this.setState({\n        selectedCheckboxes: selectedCheckboxes\n      });\n    };\n\n    _this.submitAnswer = function (qus_id) {\n      var ques_id = qus_id;\n      var userId = _this.state.user_submission_id;\n      var is_interested = '1';\n      var base_64 = _this.state.image_base64;\n      var final_ans = '';\n\n      if (base_64) {\n        final_ans = base_64;\n      } else {\n        if (_this.state.text_input) {\n          final_ans = _this.state.text_input;\n        } else if (_this.state.number_text) {\n          final_ans = _this.state.number_text;\n        } else if (_this.state.radio_btn) {\n          final_ans = _this.state.radio_btn;\n        } else {\n          final_ans = _this.state.selectedCheckboxes.toString();\n        }\n      }\n\n      if (base_64) {\n        _this.getDocument(ques_id, userId, is_interested, final_ans);\n      } else {\n        _this.getUserAnswer(ques_id, userId, is_interested, final_ans);\n      }\n    };\n\n    _this.getUserAnswer = function (ques_id, userId, is_interested, final_ans) {\n      var data = {\n        user_id: userId,\n        question_id: ques_id,\n        is_interested: is_interested,\n        answer: final_ans\n      };\n      console.log(data);\n\n      _this.setState({\n        DataisLoaded: false\n      });\n\n      var resp = getUserAnswer(data).then(function (resp) {\n        var result = resp.data;\n        var message = result.message;\n        var status = result.status;\n        console.log(result);\n\n        if (status != 1) {\n          _this.setState({\n            api_resp: message\n          });\n        } else {\n          _this.setState({\n            api_resp: ''\n          });\n        }\n\n        setTimeout(function () {\n          _this.setState({\n            api_resp: '',\n            text_input: '',\n            number_text: '',\n            selectedCheckboxes: [],\n            radio_btn: ''\n          });\n        }, 3000);\n        setTimeout(function () {\n          _this.getRandomQuestion(userId);\n\n          _this.setState({\n            DataisLoaded: true\n          });\n        }, 5000);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.getDocument = function (ques_id, userId, is_interested, final_ans) {\n      var data = {\n        user_id: userId,\n        question_id: ques_id,\n        is_interested: is_interested,\n        document: final_ans\n      };\n      console.log(data);\n      var resp = getUserAnswer(data).then(function (resp) {\n        var result = resp.data;\n        var message = result.message;\n        var status = result.status;\n        console.log(result);\n\n        if (status != 1) {\n          _this.setState({\n            api_resp: message\n          });\n        } else {\n          _this.setState({\n            api_resp: ''\n          });\n        }\n\n        setTimeout(function () {\n          _this.setState({\n            api_resp: '',\n            text_input: '',\n            number_text: '',\n            radio_btn: '',\n            selectedCheckboxes: [],\n            image_base64: ''\n          });\n        }, 3000);\n        setTimeout(function () {\n          _this.getRandomQuestion(userId);\n        }, 5000);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Question, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var userId = this.props.route.params.user_id;\n      this.setState({\n        user_submission_id: userId\n      });\n      this.getRandomQuestion(userId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          DataisLoaded = _this$state.DataisLoaded,\n          items = _this$state.items;\n\n      if (!DataisLoaded) {\n        return _jsx(Loader, {});\n      }\n\n      if (!this.state.clicked) {\n        return _jsxs(SafeAreaView, {\n          style: styles.container,\n          children: [_jsx(View, {\n            style: customstyles.header80,\n            children: _jsx(Text, {\n              style: customstyles.heading,\n              children: \"QUESTION STORE\"\n            })\n          }), _jsxs(View, {\n            children: [_jsx(Text, {\n              style: customstyles.textpurple,\n              children: \"Continue answering questions about your identity! for different questions toggle your preference in the setting page\"\n            }), _jsx(TouchableOpacity, {\n              onPress: this.startQuiz,\n              style: _objectSpread(_objectSpread({}, customstyles.px30), customstyles.my20),\n              children: _jsx(Text, {\n                style: customstyles.btnTheme,\n                children: \"START\"\n              })\n            })]\n          })]\n        });\n      }\n\n      return _jsx(SafeAreaView, {\n        style: styles.scrollArea,\n        children: _jsx(ScrollView, {\n          style: styles.innerView,\n          children: _jsxs(View, {\n            style: styles.container,\n            children: [_jsx(View, {\n              children: this.state.api_resp.length > 0 && _jsx(Text, {\n                style: {\n                  color: 'red'\n                },\n                children: this.state.api_resp\n              })\n            }), _jsx(View, {\n              children: this.state.Questions ? this.state.Questions.map(function (item, i) {\n                return _jsxs(View, {\n                  children: [_jsx(View, {\n                    children: _jsx(Text, {\n                      children: \"Question\"\n                    })\n                  }), _jsx(View, {\n                    children: _jsx(Text, {\n                      children: item.question\n                    })\n                  }), item.question_mode == '1' && _jsx(View, {\n                    children: _jsx(TextInput, {\n                      placeholder: 'Answer',\n                      onChangeText: function onChangeText(text_input) {\n                        return _this2.setState({\n                          text_input: text_input\n                        });\n                      },\n                      style: customstyles.input\n                    })\n                  }), item.question_mode == '2' && _jsx(View, {\n                    children: _this2.state.questionOptions.map(function (radioItem, j) {\n                      return _jsxs(View, {\n                        style: {\n                          flexDirection: 'row'\n                        },\n                        children: [_jsx(Text, {\n                          style: styles.radioText,\n                          children: radioItem.option\n                        }), _jsx(TouchableOpacity, {\n                          style: styles.radioCircle,\n                          onPress: function onPress() {\n                            _this2.setState({\n                              radio_btn: radioItem.id\n                            });\n                          },\n                          children: radioItem.id === _this2.state.radio_btn && _jsx(View, {\n                            style: styles.selectedRb\n                          })\n                        })]\n                      }, j);\n                    })\n                  }), item.question_mode == '3' && _jsx(View, {\n                    children: _this2.state.questionOptions.map(function (checkBoxItem, k) {\n                      return _jsxs(View, {\n                        children: [_jsx(Checkbox, {\n                          value: !!_this2.state.selectedCheckboxes.includes(checkBoxItem.id),\n                          onValueChange: function onValueChange() {\n                            return _this2.onChange(checkBoxItem.id);\n                          },\n                          selected: _this2.state.selectedCheckboxes.includes(checkBoxItem.id),\n                          color: !!_this2.state.selectedCheckboxes.includes(checkBoxItem.id) ? '#663792' : '#663792',\n                          style: customstyles.mr10\n                        }), _jsx(Text, {\n                          children: checkBoxItem.option\n                        })]\n                      }, k);\n                    })\n                  }), item.question_mode == '4' && _jsx(View, {\n                    children: _jsx(TouchableOpacity, {\n                      onPress: _this2.pickDocument,\n                      children: _jsx(Text, {\n                        style: {\n                          fontSize: 20,\n                          color: \"red\",\n                          borderColor: 'green'\n                        },\n                        children: \"Upload File\"\n                      })\n                    })\n                  }), item.question_mode == '5' && _jsx(View, {\n                    children: _jsx(TextInput, {\n                      placeholder: 'Numeric Value',\n                      keyboardType: 'numeric',\n                      onChangeText: function onChangeText(number_text) {\n                        return _this2.setState({\n                          number_text: number_text\n                        });\n                      },\n                      style: customstyles.input\n                    })\n                  }), item.question_mode == '6' && _jsx(View, {\n                    children: _jsx(TextInput, {\n                      placeholder: 'Answer',\n                      onChangeText: function onChangeText(text_input) {\n                        return _this2.setState({\n                          text_input: text_input\n                        });\n                      },\n                      style: customstyles.input\n                    })\n                  }), _jsxs(View, {\n                    children: [_jsx(TouchableOpacity, {\n                      onPress: function onPress() {\n                        return _this2.qusSkip(item.id);\n                      },\n                      children: _jsx(Text, {\n                        style: customstyles.btnRedsmall,\n                        children: \"SKIP\"\n                      })\n                    }), _jsx(TouchableOpacity, {\n                      onPress: function onPress() {\n                        return _this2.submitAnswer(item.id);\n                      },\n                      children: _jsx(Text, {\n                        style: customstyles.btnThemesmall,\n                        children: \"SUBMIT\"\n                      })\n                    })]\n                  }), _jsx(View, {\n                    children: _jsx(TouchableOpacity, {\n                      onPress: function onPress() {\n                        _this2.props.navigation.goBack(), _this2.setState({\n                          clicked: false\n                        });\n                      },\n                      style: customstyles.my15,\n                      children: _jsx(Text, {\n                        style: customstyles.btnRed,\n                        children: \"Exit\"\n                      })\n                    })\n                  })]\n                }, i);\n              }) : 'No Data'\n            })]\n          })\n        })\n      });\n    }\n  }]);\n\n  return Question;\n}(Component);\n\nvar styles = StyleSheet.create({\n  scrollArea: {\n    flex: 1,\n    width: \"100%\",\n    paddingTop: StatusBar.currentHeight\n  },\n  innerView: {\n    height: \"100%\",\n    paddingHorizontal: 20\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 5,\n    marginBottom: 5,\n    shadowColor: 'red',\n    shadowOffset: {\n      width: 10,\n      height: 2\n    },\n    shadowOpacity: .5,\n    shadowRadius: 7,\n    borderColor: \"#eee\",\n    borderWidth: 2,\n    backgroundColor: \"white\",\n    padding: 10,\n    borderRadius: 5\n  },\n  button: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n    padding: 10,\n    marginBottom: 20,\n    borderRadius: 30,\n    marginTop: 20\n  },\n  buttonText: {\n    color: \"#663792\",\n    fontWeight: \"bold\",\n    fontSize: 20\n  },\n  radioCircle: {\n    height: 30,\n    width: 30,\n    borderRadius: 100,\n    borderWidth: 2,\n    borderColor: '#3740ff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radioText: {\n    marginRight: 35,\n    fontSize: 20,\n    color: '#000'\n  },\n  selectedRb: {\n    width: 15,\n    height: 15,\n    borderRadius: 50,\n    backgroundColor: '#3740ff'\n  }\n});\nexport default Question;","map":{"version":3,"sources":["D:/IdentityWallet/components/Question.js"],"names":["React","Component","Ionicons","Loader","RadioButtonRN","Checkbox","customstyles","getRandomQuestion","getUserAnswer","DocumentPicker","Question","state","user_submission_id","DataisLoaded","Questions","Question_type","clicked","text_input","radio_btn","number_text","api_resp","image_base64","selectedCheckboxes","questionOptions","userId","resp","then","result","data","options","question_options","setState","catch","error","console","log","startQuiz","pickDocument","getDocumentAsync","uri","qusSkip","qus_id","ques_id","is_interested","user_id","question_id","status","message","onChange","id","is_val_checked","findIdx","indexOf","splice","push","submitAnswer","base_64","final_ans","toString","getDocument","answer","setTimeout","document","props","route","params","items","styles","container","header80","heading","textpurple","px30","my20","btnTheme","scrollArea","innerView","length","color","map","item","i","question","question_mode","input","radioItem","j","flexDirection","radioText","option","radioCircle","selectedRb","checkBoxItem","k","includes","mr10","fontSize","borderColor","btnRedsmall","btnThemesmall","navigation","goBack","my15","btnRed","StyleSheet","create","flex","width","paddingTop","StatusBar","currentHeight","height","paddingHorizontal","section","alignItems","marginTop","marginBottom","shadowColor","shadowOffset","shadowOpacity","shadowRadius","borderWidth","backgroundColor","padding","borderRadius","button","display","justifyContent","buttonText","fontWeight","marginRight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Alert, Button, TextInput, View, StyleSheet, Text, TouchableOpacity, SafeAreaView, ScrollView, StatusBar, Pressable } from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport Loader from './Loader';\r\nimport RadioButtonRN from 'radio-buttons-react-native-expo';\r\nimport Checkbox from 'expo-checkbox';\r\nimport { customstyles } from \"../customstyle\";\r\nimport { getRandomQuestion, getUserAnswer } from \"../components/functions.js\";\r\nimport * as DocumentPicker from 'expo-document-picker';\r\nclass Question extends Component {\r\n\r\n    state = {\r\n        user_submission_id: '',\r\n        DataisLoaded: false,\r\n        Questions: [],\r\n        Question_type: [],\r\n        clicked: false,\r\n        text_input: '',\r\n        radio_btn: '',\r\n        number_text: '',\r\n        api_resp: '',\r\n        image_base64: '',\r\n        selectedCheckboxes: [],\r\n        questionOptions: [],\r\n    }\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.route.params.user_id;\r\n        this.setState({\r\n            user_submission_id: userId\r\n        })\r\n        this.getRandomQuestion(userId);\r\n    }\r\n\r\n    // Get Question Listing Api\r\n    getRandomQuestion = (userId) => {\r\n        let resp = getRandomQuestion(userId)\r\n            .then(resp => {\r\n                let result = resp.data;\r\n                let options = result[0].question_options;\r\n                //console.log(result);\r\n                //console.log(options);\r\n                this.setState({\r\n                    Questions: result,\r\n                    questionOptions: options,\r\n                    DataisLoaded: true,\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n    // Close\r\n\r\n    // Start Quiz\r\n    startQuiz = () => {\r\n        this.setState({\r\n            clicked: true\r\n        })\r\n    }\r\n    // Close\r\n\r\n    // Document Picker\r\n    pickDocument = async () => {\r\n        //console.log('sasa');\r\n        let result = await DocumentPicker.getDocumentAsync({});\r\n        let image_base64 = result.uri;\r\n        this.setState({\r\n            image_base64: image_base64\r\n        });\r\n        //console.log(result.uri);\r\n        //console.log(result);\r\n    }\r\n    // Close\r\n\r\n    // qus Skip Button\r\n    qusSkip = (qus_id) => {\r\n        let ques_id = qus_id;\r\n        let userId = this.state.user_submission_id;\r\n        let is_interested = '0';\r\n\r\n        let data = {\r\n            user_id: userId,\r\n            question_id: ques_id,\r\n            is_interested: is_interested\r\n        }\r\n        //console.log(data);\r\n        this.setState({\r\n            DataisLoaded: false,\r\n        })\r\n\r\n        var resp = getUserAnswer(data)\r\n            .then(resp => {\r\n                let result = resp;\r\n                let status = result.status;\r\n                let message = result.message;\r\n                if ((status === 1)) {\r\n                    this.setState({\r\n                        DataisLoaded: true,\r\n                        number_text: '',\r\n                        text_input: '',\r\n                        radio_btn: '',\r\n                        selectedCheckboxes: [],\r\n                        image_base64: '',\r\n                    })\r\n                    this.getRandomQuestion(userId);\r\n                } else {\r\n                    // Something Went Wrong\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n\r\n\r\n\r\n    }\r\n    // Close\r\n\r\n    // Checkbox Handle\r\n    onChange = id => {\r\n        //console.log(id);\r\n        this.setState({\r\n            is_val_checked: !this.state.is_val_checked,\r\n        });\r\n        const selectedCheckboxes = this.state.selectedCheckboxes;\r\n        // Find index\r\n        const findIdx = selectedCheckboxes.indexOf(id);\r\n        // Index > -1 means that the item exists and that the checkbox is checked\r\n        // and in that case we want to remove it from the array and uncheck it\r\n        if (findIdx > -1) {\r\n            selectedCheckboxes.splice(findIdx, 1);\r\n        } else {\r\n            selectedCheckboxes.push(id);\r\n        }\r\n        this.setState({\r\n            selectedCheckboxes: selectedCheckboxes\r\n        });\r\n    }\r\n\r\n    // Close\r\n\r\n    // Submit Answers \r\n    submitAnswer = (qus_id) => {\r\n        let ques_id = qus_id;\r\n        let userId = this.state.user_submission_id;\r\n        let is_interested = '1';\r\n\r\n        let base_64 = this.state.image_base64;\r\n        let final_ans = '';\r\n\r\n        if ((base_64)) {\r\n            //console.log('Image');\r\n            final_ans = base_64;\r\n        } else {\r\n            if (this.state.text_input) {\r\n                //console.log('Input');\r\n                final_ans = this.state.text_input;\r\n            } else if (this.state.number_text) {\r\n                //console.log('Number');\r\n                final_ans = this.state.number_text;\r\n            } else if (this.state.radio_btn) {\r\n                //console.log('Radio');\r\n                final_ans = this.state.radio_btn;\r\n            } else {\r\n                //console.log('Checbox');\r\n                final_ans = this.state.selectedCheckboxes.toString();\r\n            }\r\n        }\r\n\r\n        //console.log(final_ans);\r\n\r\n        if ((base_64)) {\r\n            this.getDocument(ques_id, userId, is_interested, final_ans);\r\n        } else {\r\n            this.getUserAnswer(ques_id, userId, is_interested, final_ans);\r\n        }\r\n    }\r\n    //   Close\r\n\r\n    // Submitting Asn\r\n\r\n    getUserAnswer = (ques_id, userId, is_interested, final_ans) => {\r\n\r\n        let data = {\r\n            user_id: userId,\r\n            question_id: ques_id,\r\n            is_interested: is_interested,\r\n            answer: final_ans\r\n        }\r\n        console.log(data);\r\n        this.setState({\r\n            DataisLoaded: false,\r\n        });\r\n\r\n        var resp = getUserAnswer(data)\r\n            .then(resp => {\r\n                let result = resp.data;\r\n                let message = result.message;\r\n                let status = result.status;\r\n                console.log(result);\r\n\r\n                if ((status != 1)) {\r\n                    this.setState({\r\n                        api_resp: message\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        api_resp: '',\r\n                    });\r\n                }\r\n\r\n\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        api_resp: '',\r\n                        text_input: '',\r\n                        number_text: '',\r\n                        selectedCheckboxes: [],\r\n                        radio_btn: '',\r\n                    });\r\n                }, 3000);\r\n\r\n                setTimeout(() => {\r\n                    this.getRandomQuestion(userId);\r\n                    this.setState({\r\n                        DataisLoaded: true,\r\n                    });\r\n                }, 5000);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n\r\n    getDocument = (ques_id, userId, is_interested, final_ans) => {\r\n        let data = {\r\n            user_id: userId,\r\n            question_id: ques_id,\r\n            is_interested: is_interested,\r\n            document: final_ans\r\n        }\r\n        console.log(data);\r\n\r\n        var resp = getUserAnswer(data)\r\n            .then(resp => {\r\n                let result = resp.data;\r\n                let message = result.message;\r\n                let status = result.status;\r\n                console.log(result);\r\n\r\n                if ((status != 1)) {\r\n                    this.setState({\r\n                        api_resp: message\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        api_resp: ''\r\n                    });\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        api_resp: '',\r\n                        text_input: '',\r\n                        number_text: '',\r\n                        radio_btn: '',\r\n                        selectedCheckboxes: [],\r\n                        image_base64: '',\r\n                    });\r\n                }, 3000);\r\n\r\n                setTimeout(() => {\r\n                    this.getRandomQuestion(userId);\r\n                }, 5000);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n    // Close\r\n\r\n\r\n    render() {\r\n\r\n        const { DataisLoaded, items } = this.state;\r\n        if (!DataisLoaded) {\r\n            return <Loader />;\r\n        }\r\n\r\n\r\n        if (!this.state.clicked) {\r\n\r\n            return (\r\n                <SafeAreaView style={styles.container}>\r\n                    <View style={customstyles.header80}>\r\n                        <Text style={customstyles.heading}>QUESTION STORE</Text>\r\n                    </View>\r\n                    <View>\r\n                        <Text style={customstyles.textpurple}>Continue answering questions about your identity! for\r\n                            different questions toggle your preference in the setting page</Text>\r\n\r\n                        <TouchableOpacity onPress={this.startQuiz}\r\n                            style={{ ...customstyles.px30, ...customstyles.my20 }}>\r\n                            <Text style={customstyles.btnTheme}>START</Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                </SafeAreaView >);\r\n        }\r\n\r\n        return (\r\n            <SafeAreaView style={styles.scrollArea}>\r\n                <ScrollView style={styles.innerView}>\r\n                    <View style={styles.container}>\r\n\r\n                        <View>\r\n                            {\r\n                                this.state.api_resp.length > 0 &&\r\n                                <Text style={{ color: 'red' }}>{this.state.api_resp}</Text>\r\n                            }\r\n                        </View>\r\n\r\n                        <View>\r\n                            {\r\n                                this.state.Questions ?\r\n\r\n                                    this.state.Questions.map((item, i) => (\r\n                                        <View key={i}>\r\n\r\n                                            <View><Text>Question</Text></View>\r\n\r\n                                            <View>\r\n                                                <Text>{item.question}</Text>\r\n                                            </View>\r\n\r\n                                            {\r\n                                                item.question_mode == '1' &&\r\n                                                <View>\r\n                                                    <TextInput\r\n                                                        placeholder={'Answer'}\r\n                                                        onChangeText={(text_input) => this.setState({ text_input })}\r\n                                                        style={customstyles.input}\r\n                                                    />\r\n                                                </View>\r\n                                            }\r\n\r\n                                            {\r\n                                                item.question_mode == '2' &&\r\n                                                <View>\r\n                                                    {\r\n                                                        this.state.questionOptions.map((radioItem, j) => (\r\n                                                            // <RadioButtonRN\r\n                                                            //     data={[\r\n                                                            //         {\r\n                                                            //             label: radioItem.option,\r\n                                                            //             key: radioItem.id,\r\n                                                            //             accessibilityLabel: radioItem.option\r\n                                                            //         }\r\n                                                            //     ]}\r\n                                                            //     key={j}\r\n                                                            //     initial={-1}\r\n                                                            //     selectedBtn={(e) => console.log(e)}\r\n                                                            //     icon={\r\n                                                            //         <Ionicons name=\"md-chevron-back-outline\" size={24} color=\"#2c9dd1\" />\r\n                                                            //     }\r\n                                                            // />\r\n                                                            <View style={{ flexDirection: 'row' }} key={j}>\r\n                                                                <Text style={styles.radioText}>{radioItem.option}</Text>\r\n                                                                <TouchableOpacity style={styles.radioCircle}\r\n                                                                    onPress={() => {\r\n                                                                        this.setState({\r\n                                                                            radio_btn: radioItem.id,\r\n                                                                        });\r\n                                                                    }}>\r\n                                                                    {radioItem.id === this.state.radio_btn && <View style={styles.selectedRb} />}\r\n                                                                </TouchableOpacity>\r\n                                                            </View>\r\n                                                        ))\r\n                                                    }\r\n\r\n                                                </View>\r\n                                            }\r\n\r\n                                            {\r\n                                                item.question_mode == '3' &&\r\n                                                <View>\r\n                                                    {\r\n                                                        this.state.questionOptions.map((checkBoxItem, k) => (\r\n                                                            <View key={k}>\r\n                                                                <Checkbox\r\n                                                                    value={!!this.state.selectedCheckboxes.includes(checkBoxItem.id)}\r\n                                                                    onValueChange={() => this.onChange(checkBoxItem.id)}\r\n                                                                    selected={this.state.selectedCheckboxes.includes(checkBoxItem.id)}\r\n                                                                    color={!!this.state.selectedCheckboxes.includes(checkBoxItem.id) ? '#663792' : '#663792'}\r\n                                                                    style={customstyles.mr10}\r\n                                                                />\r\n                                                                <Text>{checkBoxItem.option}</Text></View>\r\n                                                        ))\r\n                                                    }\r\n                                                </View>\r\n                                            }\r\n\r\n                                            {\r\n                                                item.question_mode == '4' &&\r\n\r\n                                                <View>\r\n                                                    <TouchableOpacity onPress={this.pickDocument}>\r\n                                                        <Text style={{ fontSize: 20, color: \"red\", borderColor: 'green' }}>Upload File</Text>\r\n                                                    </TouchableOpacity>\r\n                                                </View>\r\n                                            }\r\n\r\n                                            {\r\n                                                item.question_mode == '5' &&\r\n                                                <View>\r\n                                                    <TextInput\r\n                                                        placeholder={'Numeric Value'}\r\n                                                        keyboardType={'numeric'}\r\n                                                        onChangeText={(number_text) => this.setState({ number_text })}\r\n                                                        style={customstyles.input}\r\n                                                    />\r\n                                                </View>\r\n\r\n                                            }\r\n\r\n                                            {\r\n                                                item.question_mode == '6' &&\r\n                                                <View>\r\n                                                    <TextInput\r\n                                                        placeholder={'Answer'}\r\n                                                        onChangeText={(text_input) => this.setState({ text_input })}\r\n                                                        style={customstyles.input}\r\n                                                    />\r\n                                                </View>\r\n\r\n                                            }\r\n\r\n                                            {/* Skip & Submit button */}\r\n                                            <View>\r\n                                                <TouchableOpacity onPress={() => this.qusSkip(item.id)}>\r\n                                                    <Text style={customstyles.btnRedsmall}>SKIP</Text>\r\n                                                </TouchableOpacity>\r\n\r\n                                                <TouchableOpacity onPress={() => this.submitAnswer(item.id)}>\r\n                                                    <Text style={customstyles.btnThemesmall}>SUBMIT</Text>\r\n                                                </TouchableOpacity>\r\n                                            </View>\r\n                                            {/* Close */}\r\n\r\n\r\n                                            {/* Exit Button */}\r\n                                            <View>\r\n                                                <TouchableOpacity\r\n                                                    onPress={() => {\r\n                                                        this.props.navigation.goBack(), this.setState({\r\n                                                            clicked: false\r\n                                                        })\r\n                                                    }} style={customstyles.my15}>\r\n                                                    <Text style={customstyles.btnRed}>Exit</Text>\r\n                                                </TouchableOpacity>\r\n                                            </View>\r\n                                            {/* Close */}\r\n\r\n                                        </View>\r\n                                    ))\r\n                                    : 'No Data'\r\n                            }\r\n                        </View>\r\n                    </View>\r\n                </ScrollView>\r\n            </SafeAreaView >\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\r\n    scrollArea: {\r\n        flex: 1,\r\n        width: \"100%\",\r\n        paddingTop: StatusBar.currentHeight,\r\n    },\r\n    innerView: {\r\n        height: \"100%\",\r\n        paddingHorizontal: 20,\r\n    },\r\n    section: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        marginTop: 5,\r\n        marginBottom: 5,\r\n        shadowColor: 'red',\r\n        shadowOffset: { width: 10, height: 2 },\r\n        shadowOpacity: .5,\r\n        shadowRadius: 7,\r\n        borderColor: \"#eee\",\r\n        borderWidth: 2,\r\n        backgroundColor: \"white\",\r\n        padding: 10,\r\n        borderRadius: 5,\r\n    },\r\n    button: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-evenly\",\r\n        alignItems: \"center\",\r\n        padding: 10,\r\n        marginBottom: 20,\r\n        borderRadius: 30,\r\n        marginTop: 20,\r\n    },\r\n    buttonText: {\r\n        color: \"#663792\",\r\n        fontWeight: \"bold\",\r\n        fontSize: 20\r\n    },\r\n    radioCircle: {\r\n        height: 30,\r\n        width: 30,\r\n        borderRadius: 100,\r\n        borderWidth: 2,\r\n        borderColor: '#3740ff',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    radioText: {\r\n        marginRight: 35,\r\n        fontSize: 20,\r\n        color: '#000',\r\n    },\r\n    selectedRb: {\r\n        width: 15,\r\n        height: 15,\r\n        borderRadius: 50,\r\n        backgroundColor: '#3740ff',\r\n    },\r\n});\r\nexport default Question;"]},"metadata":{},"sourceType":"module"}