{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport axios from 'axios';\nimport { NewregisterAPI } from \"./functions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fname: '',\n      lname: '',\n      reg_email: '',\n      phone: '',\n      password: '',\n      conf_pass: '',\n      fname_err: '',\n      lname_err: '',\n      email_err: '',\n      phone_err: '',\n      password_err: '',\n      conf_pass_err: '',\n      api_resp: ''\n    };\n\n    _this.register = function _callee() {\n      var data, resp;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = {\n                fname: _this.state.fname,\n                lname: _this.state.lname,\n                email: _this.state.reg_email,\n                phone: _this.state.phone,\n                password: _this.state.password,\n                platform: Platform.OS\n              };\n              console.log(data);\n              resp = NewregisterAPI(data).then(function (resp) {\n                console.log(res.data);\n              }).catch(function (response) {\n                console.log(response);\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"validateInput\",\n    value: function validateInput() {\n      var _this$state = this.state,\n          fname = _this$state.fname,\n          lname = _this$state.lname,\n          reg_email = _this$state.reg_email,\n          phone = _this$state.phone,\n          password = _this$state.password,\n          conf_pass = _this$state.conf_pass;\n      var pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w\\w+)+$/;\n\n      if (fname == '') {\n        this.setState({\n          fname_err: 'First name is required'\n        });\n        return;\n      } else {\n        this.setState({\n          fname_err: ''\n        });\n      }\n\n      if (lname == '') {\n        this.setState({\n          lname_err: 'Last name is required'\n        });\n        return;\n      } else {\n        this.setState({\n          lname_err: ''\n        });\n      }\n\n      if (reg_email == '') {\n        this.setState({\n          email_err: 'Email is required'\n        });\n        return;\n      } else {\n        this.setState({\n          email_err: ''\n        });\n      }\n\n      if (pattern.test(reg_email) === false) {\n        this.setState({\n          email_err: 'Email is not valid'\n        });\n        return;\n      } else {\n        this.setState({\n          email_err: ''\n        });\n      }\n\n      if (phone == '') {\n        this.setState({\n          phone_err: 'Phone no is required'\n        });\n        return;\n      } else {\n        this.setState({\n          phone_err: ''\n        });\n      }\n\n      if (password == '') {\n        this.setState({\n          password_err: 'Password is required'\n        });\n        return;\n      } else {\n        this.setState({\n          password_err: ''\n        });\n      }\n\n      if (conf_pass == '') {\n        this.setState({\n          conf_pass_err: 'Confirm Password is required'\n        });\n        return;\n      } else {\n        this.setState({\n          conf_pass_err: ''\n        });\n      }\n\n      if (password != conf_pass) {\n        this.setState({\n          password_err: 'Password does not match'\n        });\n        return;\n      } else {\n        this.setState({\n          password_err: ''\n        });\n      }\n\n      if (fname != '' && lname != '' && reg_email != '' && phone != '' && password != '' && conf_pass != '') {\n        this.register();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(Text, {\n          children: this.state.api_resp\n        }), _jsx(TextInput, {\n          value: this.state.fname,\n          onChangeText: function onChangeText(fname) {\n            return _this2.setState({\n              fname: fname\n            });\n          },\n          placeholder: 'Enter First Name',\n          style: styles.input\n        }), _jsx(Text, {\n          children: this.state.fname_err\n        }), _jsx(TextInput, {\n          value: this.state.lname,\n          onChangeText: function onChangeText(lname) {\n            return _this2.setState({\n              lname: lname\n            });\n          },\n          placeholder: 'Enter Last Name',\n          style: styles.input\n        }), _jsx(Text, {\n          children: this.state.lname_err\n        }), _jsx(TextInput, {\n          value: this.state.reg_email,\n          onChangeText: function onChangeText(reg_email) {\n            return _this2.setState({\n              reg_email: reg_email\n            });\n          },\n          placeholder: 'Enter Email',\n          style: styles.input\n        }), _jsx(Text, {\n          children: this.state.email_err\n        }), _jsx(TextInput, {\n          value: this.state.phone,\n          keyboardType: 'numeric',\n          onChangeText: function onChangeText(phone) {\n            return _this2.setState({\n              phone: phone\n            });\n          },\n          placeholder: 'Enter Phone No',\n          style: styles.input\n        }), _jsx(Text, {\n          children: this.state.phone_err\n        }), _jsx(TextInput, {\n          value: this.state.password,\n          secureTextEntry: true,\n          onChangeText: function onChangeText(password) {\n            return _this2.setState({\n              password: password\n            });\n          },\n          placeholder: 'Enter Pasword',\n          style: styles.input\n        }), _jsx(Text, {\n          children: this.state.password_err\n        }), _jsx(TextInput, {\n          value: this.state.conf_pass,\n          secureTextEntry: true,\n          onChangeText: function onChangeText(conf_pass) {\n            return _this2.setState({\n              conf_pass: conf_pass\n            });\n          },\n          placeholder: 'Enter Confirm Password',\n          style: styles.input\n        }), _jsx(Text, {\n          children: this.state.conf_pass_err\n        }), _jsx(Button, {\n          title: 'Register',\n          style: styles.input,\n          onPress: this.validateInput.bind(this)\n        })]\n      });\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#ecf0f1'\n  },\n  input: {\n    width: 200,\n    height: 44,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: 'black',\n    marginBottom: 10\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["D:/IdentityWallet/components/Signup.js"],"names":["React","Component","axios","NewregisterAPI","LoginScreen","props","state","fname","lname","reg_email","phone","password","conf_pass","fname_err","lname_err","email_err","phone_err","password_err","conf_pass_err","api_resp","register","data","email","platform","Platform","OS","console","log","resp","then","res","catch","response","pattern","setState","test","styles","container","input","validateInput","bind","StyleSheet","create","flex","alignItems","justifyContent","backgroundColor","width","height","padding","borderWidth","borderColor","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Alert, Button, TextInput, View, StyleSheet, Text } from 'react-native';\r\nimport axios from 'axios';\r\nimport { NewregisterAPI } from './functions';\r\nclass LoginScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        fname: '',\r\n        lname: '',\r\n        reg_email: '',\r\n        phone: '',\r\n        password: '',\r\n        conf_pass: '',\r\n\r\n        fname_err: '',\r\n        lname_err: '',\r\n        email_err: '',\r\n        phone_err: '',\r\n        password_err: '',\r\n        conf_pass_err: '',\r\n\r\n        api_resp: '',\r\n\r\n    };\r\n\r\n    validateInput() {\r\n        const { fname, lname, reg_email, phone, password, conf_pass } = this.state;\r\n        let pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w\\w+)+$/;\r\n        //Alert.alert('Credentials', `${username} + ${password}`);\r\n        if ((fname == '')) {\r\n            this.setState({\r\n                fname_err: 'First name is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                fname_err: ''\r\n            })\r\n        }\r\n\r\n        if ((lname == '')) {\r\n            this.setState({\r\n                lname_err: 'Last name is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                lname_err: ''\r\n            })\r\n        }\r\n\r\n        if ((reg_email == '')) {\r\n            this.setState({\r\n                email_err: 'Email is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                email_err: ''\r\n            })\r\n        }\r\n\r\n        if (pattern.test(reg_email) === false) {\r\n            this.setState({\r\n                email_err: 'Email is not valid'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                email_err: ''\r\n            })\r\n        }\r\n\r\n        if ((phone == '')) {\r\n            this.setState({\r\n                phone_err: 'Phone no is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                phone_err: ''\r\n            })\r\n        }\r\n\r\n        if ((password == '')) {\r\n            this.setState({\r\n                password_err: 'Password is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                password_err: ''\r\n            })\r\n        }\r\n\r\n        if ((conf_pass == '')) {\r\n            this.setState({\r\n                conf_pass_err: 'Confirm Password is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                conf_pass_err: ''\r\n            })\r\n        }\r\n\r\n        if ((password != conf_pass)) {\r\n            this.setState({\r\n                password_err: 'Password does not match'\r\n            })\r\n            return;\r\n        }\r\n        else {\r\n            this.setState({\r\n                password_err: ''\r\n            })\r\n        }\r\n\r\n        if ((fname != '') && (lname != '') && (reg_email != '') && (phone != '') && (password != '') && (conf_pass != '')) {\r\n            this.register();\r\n        }\r\n    }\r\n\r\n    register = async () => {\r\n        let data = {\r\n            fname: this.state.fname,\r\n            lname: this.state.lname,\r\n            email: this.state.reg_email,\r\n            phone: this.state.phone,\r\n            password: this.state.password,\r\n            platform: Platform.OS\r\n        }\r\n\r\n        console.log(data);\r\n        var resp = NewregisterAPI(data)\r\n            .then(function (resp) {\r\n                //handle success\r\n                //console.log(resp.data);\r\n                console.log(res.data);\r\n                // let message = res.message;\r\n                // let status = res.success;\r\n\r\n                // if (status == 2) {\r\n                //     this.setState({\r\n                //         api_resp: message\r\n                //     })\r\n                // } else {\r\n                //     this.setState({\r\n                //         api_resp: message\r\n                //     })\r\n                // }\r\n            })\r\n            .catch(function (response) {\r\n                //handle error\r\n                console.log(response);\r\n            });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <View style={styles.container}>\r\n\r\n                <Text>{this.state.api_resp}</Text>\r\n                <TextInput\r\n                    value={this.state.fname}\r\n                    onChangeText={(fname) => this.setState({ fname })}\r\n                    placeholder={'Enter First Name'}\r\n                    style={styles.input}\r\n                />\r\n                <Text>{this.state.fname_err}</Text>\r\n\r\n                <TextInput\r\n                    value={this.state.lname}\r\n                    onChangeText={(lname) => this.setState({ lname })}\r\n                    placeholder={'Enter Last Name'}\r\n                    style={styles.input}\r\n                />\r\n                <Text>{this.state.lname_err}</Text>\r\n\r\n\r\n                <TextInput\r\n                    value={this.state.reg_email}\r\n                    onChangeText={(reg_email) => this.setState({ reg_email })}\r\n                    placeholder={'Enter Email'}\r\n                    style={styles.input}\r\n                />\r\n                <Text>{this.state.email_err}</Text>\r\n\r\n                <TextInput\r\n                    value={this.state.phone}\r\n                    keyboardType={'numeric'}\r\n                    onChangeText={(phone) => this.setState({ phone })}\r\n                    placeholder={'Enter Phone No'}\r\n                    style={styles.input}\r\n                />\r\n                <Text>{this.state.phone_err}</Text>\r\n\r\n\r\n                <TextInput\r\n                    value={this.state.password}\r\n                    secureTextEntry={true}\r\n                    onChangeText={(password) => this.setState({ password })}\r\n                    placeholder={'Enter Pasword'}\r\n                    style={styles.input}\r\n                />\r\n                <Text>{this.state.password_err}</Text>\r\n\r\n                <TextInput\r\n                    value={this.state.conf_pass}\r\n                    secureTextEntry={true}\r\n                    onChangeText={(conf_pass) => this.setState({ conf_pass })}\r\n                    placeholder={'Enter Confirm Password'}\r\n                    style={styles.input}\r\n                />\r\n                <Text>{this.state.conf_pass_err}</Text>\r\n\r\n                <Button\r\n                    title={'Register'}\r\n                    style={styles.input}\r\n                    onPress={this.validateInput.bind(this)}\r\n                />\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#ecf0f1',\r\n    },\r\n    input: {\r\n        width: 200,\r\n        height: 44,\r\n        padding: 10,\r\n        borderWidth: 1,\r\n        borderColor: 'black',\r\n        marginBottom: 10,\r\n    },\r\n});\r\n\r\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}