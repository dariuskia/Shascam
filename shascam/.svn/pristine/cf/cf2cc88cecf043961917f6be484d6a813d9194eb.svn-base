import React, { Component } from 'react';
import { Alert, Button, TextInput, View, StyleSheet, Text, TouchableOpacity, SafeAreaView, ScrollView, StatusBar, } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Picker } from "@react-native-picker/picker";
import { customstyles } from "../customstyle";
import Loader from './Loader';
import { Ionicons } from '@expo/vector-icons';
import { LoginAPI, commonGet } from './functions';
class LoginScreen extends Component {
    constructor(props) {
        super(props);
    }

    state = {

        title: '',
        fname: '',
        lname: '',
        reg_email: '',
        country_code: '',
        phone: '',
        nationality_code: '',
        password: '',
        conf_pass: '',
        id_type: '',
        id_number: '',

        fname_err: '',
        lname_err: '',
        email_err: '',
        phone_err: '',
        password_err: '',
        conf_pass_err: '',

        userTitles: [],
        userIdTypes: [],
        userMobileCountries: [],
        userNationality: [],
        api_resp: '',
        api_resp_error: '',
    }

    componentDidMount() {
        this.getUserTitle();
        this.getIdTypes();
        this.getMobileCountry();
        this.getNationalities();
    }

    // Dropdown List
    getUserTitle = () => {
        let data = {
            api_url: 'mmTitles'
        }
        var resp = commonGet(data)
            .then(resp => {
                let result = resp.data;
                this.setState({
                    userTitles: result
                })
                //console.log(result);
            })
            .catch((error) => {
                console.log(error)
            })
    }

    getIdTypes = () => {
        let data = {
            api_url: 'mmIdTypes'
        }
        var resp = commonGet(data)
            .then(resp => {
                let result = resp.data;
                this.setState({
                    userIdTypes: result
                })
                //console.log(result);
            })
            .catch((error) => {
                console.log(error)
            })
    }

    getMobileCountry = () => {
        let data = {
            api_url: 'mmMobileCountryCodes'
        }
        var resp = commonGet(data)
            .then(resp => {
                let result = resp.data;
                this.setState({
                    userMobileCountries: result
                })
                //console.log(result);
            })
            .catch((error) => {
                console.log(error)
            })
    }


    getNationalities = () => {
        let data = {
            api_url: 'mmNationalities'
        }
        var resp = commonGet(data)
            .then(resp => {
                let result = resp.data;
                this.setState({
                    userNationality: result
                })
                //console.log(result);
            })
            .catch((error) => {
                console.log(error)
            })
    }
    // Close



    // Dropdoewn handling
    setTitle(value) {
        this.setState({
            title: value
        })
    }

    setIdType(value) {
        this.setState({
            id_type: value
        })
    }

    setMobileCountry(value) {
        this.setState({
            country_code: value
        })
    }

    setNationality(value) {
        this.setState({
            nationality_code: value
        })
    }

    // Close


    validateInput() {
        const { fname, lname, reg_email, phone, password, conf_pass } = this.state;
        let pattern = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w\w+)+$/;
        //Alert.alert('Credentials', `${username} + ${password}`);
        if ((fname == '')) {
            this.setState({
                fname_err: 'First name is required'
            })
            return;
        } else {
            this.setState({
                fname_err: ''
            })
        }

        if ((lname == '')) {
            this.setState({
                lname_err: 'Last name is required'
            })
            return;
        } else {
            this.setState({
                lname_err: ''
            })
        }

        if ((reg_email == '')) {
            this.setState({
                email_err: 'Email is required'
            })
            return;
        } else {
            this.setState({
                email_err: ''
            })
        }

        if (pattern.test(reg_email) === false) {
            this.setState({
                email_err: 'Email is not valid'
            })
            return;
        } else {
            this.setState({
                email_err: ''
            })
        }

        if ((phone == '')) {
            this.setState({
                phone_err: 'Phone no is required'
            })
            return;
        } else {
            this.setState({
                phone_err: ''
            })
        }

        if ((password == '')) {
            this.setState({
                password_err: 'Password is required'
            })
            return;
        } else {
            this.setState({
                password_err: ''
            })
        }

        if ((conf_pass == '')) {
            this.setState({
                conf_pass_err: 'Confirm Password is required'
            })
            return;
        } else {
            this.setState({
                conf_pass_err: ''
            })
        }

        if ((password != conf_pass)) {
            this.setState({
                password_err: 'Confirm Password & Password does not match'
            })
            return;
        }
        else {
            this.setState({
                password_err: ''
            })
        }

        if ((fname != '') && (lname != '') && (reg_email != '') && (phone != '') && (password != '') && (conf_pass != '')) {
            this.register();
        }
    }

    register = async () => {
        let data = {
            title: this.state.title,
            fname: this.state.fname,
            lname: this.state.lname,
            email: this.state.reg_email,
            country_code: this.state.country_code,
            phone: this.state.phone,
            nationality_code: this.state.nationality_code,
            password: this.state.password,
            id_type: this.state.id_type,
            id_number: this.state.id_number,
            platform: Platform.OS,
            api_url: 'registration'
        }

        console.log(data);
        this.setState({
            isLoading: true,
        })
        var response = LoginAPI(data)
            .then(res => {
                console.log(res);
                let message = res.message;
                let status = res.status;
                let mm_code = res.code;

                if ((status == 2)) {
                    //Alert.alert(message);
                    this.setState({
                        api_resp_error: message,
                        isLoading: false,
                    });
                    setTimeout(() => {
                        this.setState({
                            api_resp_error: '',
                        });
                    }, 5000);
                } else if ((status == 0)) {
                    this.setState({
                        api_resp_error: message,
                        isLoading: false,
                    });
                    setTimeout(() => {
                        this.setState({
                            api_resp_error: '',
                        });
                    }, 5000);
                } else if ((mm_code == 400) || (mm_code == 401) || (mm_code == 403) || (mm_code == 500)) {
                    this.setState({
                        api_resp_error: message,
                        isLoading: false,
                    });
                    setTimeout(() => {
                        this.setState({
                            api_resp_error: '',
                        });
                    }, 5000);
                }
                else {
                    //Alert.alert(message);
                    this.setState({
                        api_resp: message,
                        isLoading: false,
                    });
                    setTimeout(() => {
                        this.setState({
                            api_resp: '',
                        })
                    }, 5000);
                    setTimeout(() => {
                        this.props.navigation.navigate('LoginScreen');
                    }, 7000);
                }
            })


    }



    render() {

        return (
            <LinearGradient colors={['#663792', '#3d418b', '#0a4487']} start={{ x: 0, y: .8 }} end={{ x: 1, y: 1 }} style={styles.linearGradient}>
                <SafeAreaView style={styles.scrollArea}>
                    <ScrollView style={styles.innerView}>
                        <View style={styles.logincontainer}>
                            <View style={{ paddingVertical: 20 }}>
                                <Text style={customstyles.headingWhite}>Signup</Text>
                            </View>

                            <TouchableOpacity onPress={() => this.props.navigation.goBack()} style={[customstyles.btnWhitecircle, { width: 36, height: 36, marginBottom: 30 }]}>
                                <Ionicons name="md-chevron-back-outline" size={24} color="#663792" />
                            </TouchableOpacity>
                            {
                                this.state.api_resp_error.length > 0 &&
                                <Text style={customstyles.alertdanger}>{this.state.api_resp_error}</Text>
                            }

                            {
                                this.state.api_resp.length > 0 &&
                                <Text style={customstyles.alertPrimary}>{this.state.api_resp}</Text>
                            }
                            <View style={customstyles.dropdownBox}>
                                <Picker
                                    selectedValue={this.state.title}
                                    onValueChange={(value, index) => this.setTitle(value)}
                                    mode="dropdown" // Android only
                                    style={customstyles.dropdown} dropdownIconColor='#fff'
                                >
                                    <Picker.Item label="Select Title" value="" color='black' />
                                    {
                                        this.state.userTitles ?
                                            this.state.userTitles.map((item, i) => (
                                                <Picker.Item key={i} label={item.code} value={item.code} color='black' />
                                            ))
                                            : <Picker.Item label='No Data' value='0' color='black' />
                                    }
                                </Picker>
                            </View>
                            <View>
                                <TextInput
                                    value={this.state.fname}
                                    onChangeText={(fname) => this.setState({ fname })}
                                    placeholder={'Enter First Name'}
                                    style={customstyles.input}
                                    placeholderTextColor="#aaa"
                                />
                                {
                                    this.state.fname_err.length > 0 &&
                                    <Text style={customstyles.alertdanger}>{this.state.fname_err}</Text>
                                }
                            </View>

                            <View>
                                <TextInput
                                    value={this.state.lname}
                                    onChangeText={(lname) => this.setState({ lname })}
                                    placeholder={'Enter Last Name'}
                                    style={customstyles.input}
                                    placeholderTextColor="#fff"
                                />
                                {
                                    this.state.lname_err.length > 0 &&
                                    <Text style={customstyles.alertdanger}>{this.state.lname_err}</Text>
                                }
                            </View>

                            <View>
                                <TextInput
                                    value={this.state.reg_email}
                                    onChangeText={(reg_email) => this.setState({ reg_email })}
                                    placeholder={'Enter Email'}
                                    style={customstyles.input}
                                    placeholderTextColor="#fff"
                                />
                                {
                                    this.state.email_err.length > 0 &&
                                    <Text style={customstyles.alertdanger}>{this.state.email_err}</Text>
                                }
                            </View>
                            <View style={customstyles.dropdownBox}>
                                <Picker
                                    selectedValue={this.state.country_code}
                                    onValueChange={(value, index) => this.setMobileCountry(value)}
                                    mode="dropdown" // Android only
                                    style={customstyles.dropdown}
                                >
                                    <Picker.Item label="Select ISD Code" value="" color='black' />
                                    {
                                        this.state.userMobileCountries ?
                                            this.state.userMobileCountries.map((item, i) => (
                                                <Picker.Item key={i} label={'+' + item.description} value={item.description} color="black" />
                                            ))
                                            : <Picker.Item label='No Data' value='0' />
                                    }
                                </Picker>
                            </View>

                            <View>
                                <TextInput
                                    value={this.state.phone}
                                    keyboardType={'numeric'}
                                    onChangeText={(phone) => this.setState({ phone })}
                                    placeholder={'Enter Phone No'}
                                    style={customstyles.input}
                                    placeholderTextColor="#fff"
                                />
                                {
                                    this.state.phone_err.length > 0 &&
                                    <Text style={customstyles.alertdanger}>{this.state.phone_err}</Text>
                                }
                            </View>

                            <View style={customstyles.dropdownBox}>
                                <Picker
                                    selectedValue={this.state.nationality_code}
                                    onValueChange={(value, index) => this.setNationality(value)}
                                    mode="dropdown" // Android only
                                    style={customstyles.dropdown}
                                >
                                    <Picker.Item label="Select Nationality" value="" color='black' />
                                    {
                                        this.state.userNationality ?
                                            this.state.userNationality.map((item, i) => (
                                                <Picker.Item key={i} label={item.code} value={item.code} color="black" />
                                            ))
                                            : <Picker.Item label='No Data' value='0' />
                                    }
                                </Picker>
                            </View>

                            <View>
                                <TextInput
                                    value={this.state.password}
                                    secureTextEntry={true}
                                    onChangeText={(password) => this.setState({ password })}
                                    placeholder={'Enter Password'}
                                    style={customstyles.input}
                                    placeholderTextColor="#fff"
                                />
                                {
                                    this.state.password_err.length > 0 &&
                                    <Text style={customstyles.alertdanger}>{this.state.password_err}</Text>
                                }
                            </View>

                            <View>
                                <TextInput
                                    value={this.state.conf_pass}
                                    secureTextEntry={true}
                                    onChangeText={(conf_pass) => this.setState({ conf_pass })}
                                    placeholder={'Enter Confirm Password'}
                                    style={customstyles.input}
                                    placeholderTextColor="#fff"
                                />
                                {
                                    this.state.conf_pass_err.length > 0 &&
                                    <Text style={customstyles.alertdanger}>{this.state.conf_pass_err}</Text>
                                }
                            </View>

                            <View style={customstyles.dropdownBox}>
                                <Picker
                                    selectedValue={this.state.id_type}
                                    onValueChange={(value, index) => this.setIdType(value)}
                                    mode="dropdown" // Android only
                                    style={customstyles.dropdown}
                                >
                                    <Picker.Item label='Select ID Types' value='' color='black' />
                                    {
                                        this.state.userIdTypes ?
                                            this.state.userIdTypes.map((item, i) => (
                                                <Picker.Item key={i} label={item.description} value={item.code} color="black" />
                                            ))
                                            : <Picker.Item label='No Data' value='0' />
                                    }
                                </Picker>
                            </View>

                            <TextInput
                                value={this.state.id_number}
                                onChangeText={(id_number) => this.setState({ id_number })}
                                placeholder={'Enter ID Number'}
                                style={customstyles.input}
                                placeholderTextColor="#fff"
                            />
                            {/* <Text style={this.state.conf_pass_err ? customstyles.alertdanger : ''}>{this.state.conf_pass_err}</Text> */}



                            <TouchableOpacity onPress={this.validateInput.bind(this)}>
                                <View
                                    style={{
                                        ...styles.button, ...customstyles.shadowBlock,
                                        backgroundColor: this.state.isLoading ? "#fff" : "#FFF",
                                    }}
                                >
                                    <Text style={styles.buttonText}>
                                        {this.state.isLoading ? "SENDING..." : "SUBMIT"}
                                    </Text>
                                    {this.state.isLoading && <Loader />}
                                </View>
                            </TouchableOpacity>

                            <View style={{ ...customstyles.rowverticalcenter, ...customstyles.mb25 }}>
                                <Text style={customstyles.labelwhite}>Already have an account  </Text>
                                <Text>
                                    <TouchableOpacity onPress={this.loginNavigation}>
                                        <Text style={{ ...customstyles.labelwhite, ...customstyles.underline }}>Login Here</Text>
                                    </TouchableOpacity>
                                </Text>
                            </View>

                        </View>
                    </ScrollView>
                </SafeAreaView>
            </LinearGradient>
        );
    }
}

const styles = StyleSheet.create({
    linearGradient: {
        flex: 1,
        width: "100%",
    },
    scrollArea: {
        flex: 1,
        width: "100%",
        paddingTop: StatusBar.currentHeight,
    },
    innerView: {
        height: "100%",
        paddingHorizontal: 20,

    },
    input: {
        width: 200,
        height: 44,
        padding: 10,
        borderWidth: 1,
        borderColor: 'black',
        marginBottom: 10,
    },
    button: {
        display: "flex",
        flexDirection: "row",
        justifyContent: "space-evenly",
        alignItems: "center",
        padding: 10,
        marginBottom: 20,
        borderRadius: 30,
    },
    buttonText: {
        color: "#663792",
        fontWeight: "bold",
        fontSize: 20
    },
    picker: {
        marginVertical: 30,
        width: 300,
        padding: 10,
        borderWidth: 1,
        borderColor: "#fff",
        color: '#fff'
    },

});

export default LoginScreen;