{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { Picker } from \"@react-native-picker/picker\";\nimport { customstyles } from \"../customstyle\";\nimport { NewregisterAPI, getTitles, getIdTypes, getMobileCountry, getNationalities } from \"./functions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      title: '',\n      fname: '',\n      lname: '',\n      reg_email: '',\n      country_code: '',\n      phone: '',\n      nationality_code: '',\n      password: '',\n      conf_pass: '',\n      id_type: '',\n      id_number: '',\n      fname_err: '',\n      lname_err: '',\n      email_err: '',\n      phone_err: '',\n      password_err: '',\n      conf_pass_err: '',\n      userTitles: [],\n      userIdTypes: [],\n      userMobileCountries: [],\n      userNationality: [],\n      api_resp: ''\n    };\n\n    _this.getUserTitle = function () {\n      var resp = getTitles().then(function (resp) {\n        var result = resp.data;\n\n        _this.setState({\n          userTitles: result\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.getIdTypes = function () {\n      var resp = getIdTypes().then(function (resp) {\n        var result = resp.data;\n\n        _this.setState({\n          userIdTypes: result\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.getMobileCountry = function () {\n      var resp = getMobileCountry().then(function (resp) {\n        var result = resp.data;\n\n        _this.setState({\n          userMobileCountries: result\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.getNationalities = function () {\n      var resp = getNationalities().then(function (resp) {\n        var result = resp.data;\n\n        _this.setState({\n          userNationality: result\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.register = function _callee() {\n      var data;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = {\n                title: _this.state.title,\n                fname: _this.state.fname,\n                lname: _this.state.lname,\n                email: _this.state.reg_email,\n                country_code: _this.state.country_code,\n                phone: _this.state.phone,\n                nationality_code: _this.state.nationality_code,\n                password: _this.state.password,\n                id_type: _this.state.id_type,\n                id_number: _this.state.id_number,\n                platform: Platform.OS\n              };\n              console.log(data);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getUserTitle();\n      this.getIdTypes();\n      this.getMobileCountry();\n      this.getNationalities();\n    }\n  }, {\n    key: \"setTitle\",\n    value: function setTitle(value) {\n      this.setState({\n        title: value\n      });\n    }\n  }, {\n    key: \"setIdType\",\n    value: function setIdType(value) {\n      this.setState({\n        id_type: value\n      });\n    }\n  }, {\n    key: \"setMobileCountry\",\n    value: function setMobileCountry(value) {\n      this.setState({\n        country_code: value\n      });\n    }\n  }, {\n    key: \"setNationality\",\n    value: function setNationality(value) {\n      this.setState({\n        nationality_code: value\n      });\n    }\n  }, {\n    key: \"validateInput\",\n    value: function validateInput() {\n      var _this$state = this.state,\n          fname = _this$state.fname,\n          lname = _this$state.lname,\n          reg_email = _this$state.reg_email,\n          phone = _this$state.phone,\n          password = _this$state.password,\n          conf_pass = _this$state.conf_pass;\n      var pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w\\w+)+$/;\n\n      if (fname == '') {\n        this.setState({\n          fname_err: 'First name is required'\n        });\n        return;\n      } else {\n        this.setState({\n          fname_err: ''\n        });\n      }\n\n      if (lname == '') {\n        this.setState({\n          lname_err: 'Last name is required'\n        });\n        return;\n      } else {\n        this.setState({\n          lname_err: ''\n        });\n      }\n\n      if (reg_email == '') {\n        this.setState({\n          email_err: 'Email is required'\n        });\n        return;\n      } else {\n        this.setState({\n          email_err: ''\n        });\n      }\n\n      if (pattern.test(reg_email) === false) {\n        this.setState({\n          email_err: 'Email is not valid'\n        });\n        return;\n      } else {\n        this.setState({\n          email_err: ''\n        });\n      }\n\n      if (phone == '') {\n        this.setState({\n          phone_err: 'Phone no is required'\n        });\n        return;\n      } else {\n        this.setState({\n          phone_err: ''\n        });\n      }\n\n      if (password == '') {\n        this.setState({\n          password_err: 'Password is required'\n        });\n        return;\n      } else {\n        this.setState({\n          password_err: ''\n        });\n      }\n\n      if (conf_pass == '') {\n        this.setState({\n          conf_pass_err: 'Confirm Password is required'\n        });\n        return;\n      } else {\n        this.setState({\n          conf_pass_err: ''\n        });\n      }\n\n      if (password != conf_pass) {\n        this.setState({\n          password_err: 'Confirm Password & Password does not match'\n        });\n        return;\n      } else {\n        this.setState({\n          password_err: ''\n        });\n      }\n\n      if (fname != '' && lname != '' && reg_email != '' && phone != '' && password != '' && conf_pass != '') {\n        this.register();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsx(LinearGradient, {\n        colors: ['#663792', '#3d418b', '#0a4487'],\n        start: {\n          x: 0,\n          y: 1\n        },\n        end: {\n          x: 1,\n          y: 1\n        },\n        style: styles.linearGradient,\n        children: _jsx(SafeAreaView, {\n          style: styles.scrollArea,\n          children: _jsx(ScrollView, {\n            style: styles.innerView,\n            children: _jsxs(View, {\n              style: styles.logincontainer,\n              children: [_jsx(View, {\n                style: {\n                  paddingVertical: 20\n                },\n                children: _jsx(Text, {\n                  style: customstyles.headingWhite,\n                  children: \"Signup\"\n                })\n              }), _jsx(Text, {\n                children: this.state.api_resp\n              }), _jsx(View, {\n                style: customstyles.dropdownBox,\n                children: _jsxs(Picker, {\n                  selectedValue: this.state.title,\n                  onValueChange: function onValueChange(value, index) {\n                    return _this2.setTitle(value);\n                  },\n                  mode: \"dropdown\",\n                  style: customstyles.dropdown,\n                  dropdownIconColor: \"#fff\",\n                  children: [_jsx(Picker.Item, {\n                    label: \"Select Title\",\n                    value: \"\",\n                    color: \"black\"\n                  }), this.state.userTitles ? this.state.userTitles.map(function (item, i) {\n                    return _jsx(Picker.Item, {\n                      label: item.code,\n                      value: item.code,\n                      color: \"black\"\n                    }, i);\n                  }) : _jsx(Picker.Item, {\n                    label: \"No Data\",\n                    value: \"0\",\n                    color: \"black\"\n                  })]\n                })\n              }), _jsxs(View, {\n                children: [_jsx(TextInput, {\n                  value: this.state.fname,\n                  onChangeText: function onChangeText(fname) {\n                    return _this2.setState({\n                      fname: fname\n                    });\n                  },\n                  placeholder: 'Enter First Name',\n                  style: customstyles.input,\n                  placeholderTextColor: \"#fff\"\n                }), this.state.fname_err.length > 0 && _jsx(Text, {\n                  style: customstyles.alertdanger,\n                  children: this.state.fname_err\n                })]\n              }), _jsxs(View, {\n                children: [_jsx(TextInput, {\n                  value: this.state.lname,\n                  onChangeText: function onChangeText(lname) {\n                    return _this2.setState({\n                      lname: lname\n                    });\n                  },\n                  placeholder: 'Enter Last Name',\n                  style: customstyles.input,\n                  placeholderTextColor: \"#fff\"\n                }), this.state.lname_err.length > 0 && _jsx(Text, {\n                  style: customstyles.alertdanger,\n                  children: this.state.lname_err\n                })]\n              }), _jsxs(View, {\n                children: [_jsx(TextInput, {\n                  value: this.state.reg_email,\n                  onChangeText: function onChangeText(reg_email) {\n                    return _this2.setState({\n                      reg_email: reg_email\n                    });\n                  },\n                  placeholder: 'Enter Email',\n                  style: customstyles.input,\n                  placeholderTextColor: \"#fff\"\n                }), this.state.email_err.length > 0 && _jsx(Text, {\n                  style: customstyles.alertdanger,\n                  children: this.state.email_err\n                })]\n              }), _jsx(View, {\n                style: customstyles.dropdownBox,\n                children: _jsxs(Picker, {\n                  selectedValue: this.state.country_code,\n                  onValueChange: function onValueChange(value, index) {\n                    return _this2.setMobileCountry(value);\n                  },\n                  mode: \"dropdown\",\n                  style: customstyles.dropdown,\n                  children: [_jsx(Picker.Item, {\n                    label: \"Select Country Code\",\n                    value: \"\",\n                    color: \"black\"\n                  }), this.state.userMobileCountries ? this.state.userMobileCountries.map(function (item, i) {\n                    return _jsx(Picker.Item, {\n                      label: '+' + item.description,\n                      value: item.code,\n                      color: \"black\"\n                    }, i);\n                  }) : _jsx(Picker.Item, {\n                    label: \"No Data\",\n                    value: \"0\"\n                  })]\n                })\n              }), _jsxs(View, {\n                children: [_jsx(TextInput, {\n                  value: this.state.phone,\n                  keyboardType: 'numeric',\n                  onChangeText: function onChangeText(phone) {\n                    return _this2.setState({\n                      phone: phone\n                    });\n                  },\n                  placeholder: 'Enter Phone No',\n                  style: customstyles.input,\n                  placeholderTextColor: \"#fff\"\n                }), this.state.phone_err.length > 0 && _jsx(Text, {\n                  style: customstyles.alertdanger,\n                  children: this.state.phone_err\n                })]\n              }), _jsx(View, {\n                style: customstyles.dropdownBox,\n                children: _jsxs(Picker, {\n                  selectedValue: this.state.nationality_code,\n                  onValueChange: function onValueChange(value, index) {\n                    return _this2.setNationality(value);\n                  },\n                  mode: \"dropdown\",\n                  style: customstyles.dropdown,\n                  children: [_jsx(Picker.Item, {\n                    label: \"Select Nationality\",\n                    value: \"\",\n                    color: \"black\"\n                  }), this.state.userNationality ? this.state.userNationality.map(function (item, i) {\n                    return _jsx(Picker.Item, {\n                      label: item.code,\n                      value: item.code,\n                      color: \"black\"\n                    }, i);\n                  }) : _jsx(Picker.Item, {\n                    label: \"No Data\",\n                    value: \"0\"\n                  })]\n                })\n              }), _jsxs(View, {\n                children: [_jsx(TextInput, {\n                  value: this.state.password,\n                  secureTextEntry: true,\n                  onChangeText: function onChangeText(password) {\n                    return _this2.setState({\n                      password: password\n                    });\n                  },\n                  placeholder: 'Enter Pasword',\n                  style: customstyles.input,\n                  placeholderTextColor: \"#fff\"\n                }), this.state.password_err.length > 0 && _jsx(Text, {\n                  style: customstyles.alertdanger,\n                  children: this.state.password_err\n                })]\n              }), _jsxs(View, {\n                children: [_jsx(TextInput, {\n                  value: this.state.conf_pass,\n                  secureTextEntry: true,\n                  onChangeText: function onChangeText(conf_pass) {\n                    return _this2.setState({\n                      conf_pass: conf_pass\n                    });\n                  },\n                  placeholder: 'Enter Confirm Password',\n                  style: customstyles.input,\n                  placeholderTextColor: \"#fff\"\n                }), this.state.conf_pass_err.length > 0 && _jsx(Text, {\n                  style: customstyles.alertdanger,\n                  children: this.state.conf_pass_err\n                })]\n              }), _jsx(View, {\n                style: customstyles.dropdownBox,\n                children: _jsxs(Picker, {\n                  selectedValue: this.state.id_type,\n                  onValueChange: function onValueChange(value, index) {\n                    return _this2.setIdType(value);\n                  },\n                  mode: \"dropdown\",\n                  style: customstyles.dropdown,\n                  children: [_jsx(Picker.Item, {\n                    label: \"Select Id Types\",\n                    value: \"\",\n                    color: \"black\"\n                  }), this.state.userIdTypes ? this.state.userIdTypes.map(function (item, i) {\n                    return _jsx(Picker.Item, {\n                      label: item.description,\n                      value: item.code,\n                      color: \"black\"\n                    }, i);\n                  }) : _jsx(Picker.Item, {\n                    label: \"No Data\",\n                    value: \"0\"\n                  })]\n                })\n              }), _jsx(TextInput, {\n                value: this.state.id_number,\n                onChangeText: function onChangeText(id_number) {\n                  return _this2.setState({\n                    id_number: id_number\n                  });\n                },\n                placeholder: 'Enter Id Number',\n                style: customstyles.input,\n                placeholderTextColor: \"#fff\"\n              }), _jsx(TouchableOpacity, {\n                onPress: this.validateInput.bind(this),\n                children: _jsxs(View, {\n                  style: _objectSpread(_objectSpread({}, styles.button), {}, {\n                    backgroundColor: this.state.isLoading ? \"#fff\" : \"#FFF\"\n                  }),\n                  children: [_jsx(Text, {\n                    style: styles.buttonText,\n                    children: this.state.isLoading ? \"SENDING...\" : \"SUBMIT\"\n                  }), this.state.isLoading && _jsx(ActivityIndicator, {\n                    size: \"large\",\n                    color: \"#663792\"\n                  })]\n                })\n              })]\n            })\n          })\n        })\n      });\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  linearGradient: {\n    flex: 1,\n    width: \"100%\"\n  },\n  scrollArea: {\n    flex: 1,\n    width: \"100%\",\n    paddingTop: StatusBar.currentHeight\n  },\n  innerView: {\n    height: \"100%\",\n    paddingHorizontal: 20\n  },\n  input: {\n    width: 200,\n    height: 44,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: 'black',\n    marginBottom: 10\n  },\n  button: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n    padding: 10,\n    marginBottom: 20,\n    borderRadius: 30\n  },\n  buttonText: {\n    color: \"#663792\",\n    fontWeight: \"bold\",\n    fontSize: 20\n  },\n  picker: {\n    marginVertical: 30,\n    width: 300,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: \"#fff\",\n    color: '#fff'\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["D:/IdentityWallet/components/Signup.js"],"names":["React","Component","LinearGradient","Picker","customstyles","NewregisterAPI","getTitles","getIdTypes","getMobileCountry","getNationalities","LoginScreen","props","state","title","fname","lname","reg_email","country_code","phone","nationality_code","password","conf_pass","id_type","id_number","fname_err","lname_err","email_err","phone_err","password_err","conf_pass_err","userTitles","userIdTypes","userMobileCountries","userNationality","api_resp","getUserTitle","resp","then","result","data","setState","catch","error","console","log","register","email","platform","Platform","OS","value","pattern","test","x","y","styles","linearGradient","scrollArea","innerView","logincontainer","paddingVertical","headingWhite","dropdownBox","index","setTitle","dropdown","map","item","i","code","input","length","alertdanger","setMobileCountry","description","setNationality","setIdType","validateInput","bind","button","backgroundColor","isLoading","buttonText","StyleSheet","create","flex","width","paddingTop","StatusBar","currentHeight","height","paddingHorizontal","padding","borderWidth","borderColor","marginBottom","display","flexDirection","justifyContent","alignItems","borderRadius","color","fontWeight","fontSize","picker","marginVertical"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Alert, Button, TextInput, View, StyleSheet, Text, TouchableOpacity, SafeAreaView, ScrollView, StatusBar, } from 'react-native';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport { customstyles } from \"../customstyle\";\r\nimport { NewregisterAPI, getTitles, getIdTypes, getMobileCountry, getNationalities } from './functions';\r\nclass LoginScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n\r\n        title: '',\r\n        fname: '',\r\n        lname: '',\r\n        reg_email: '',\r\n        country_code: '',\r\n        phone: '',\r\n        nationality_code: '',\r\n        password: '',\r\n        conf_pass: '',\r\n        id_type: '',\r\n        id_number: '',\r\n\r\n        fname_err: '',\r\n        lname_err: '',\r\n        email_err: '',\r\n        phone_err: '',\r\n        password_err: '',\r\n        conf_pass_err: '',\r\n\r\n        userTitles: [],\r\n        userIdTypes: [],\r\n        userMobileCountries: [],\r\n        userNationality: [],\r\n        api_resp: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUserTitle();\r\n        this.getIdTypes();\r\n        this.getMobileCountry();\r\n        this.getNationalities();\r\n    }\r\n\r\n    // Dropdown List\r\n    getUserTitle = () => {\r\n        var resp = getTitles()\r\n            .then(resp => {\r\n                let result = resp.data;\r\n                this.setState({\r\n                    userTitles: result\r\n                })\r\n                //console.log(result);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    getIdTypes = () => {\r\n        var resp = getIdTypes()\r\n            .then(resp => {\r\n                let result = resp.data;\r\n                this.setState({\r\n                    userIdTypes: result\r\n                })\r\n                //console.log(result);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    getMobileCountry = () => {\r\n        var resp = getMobileCountry()\r\n            .then(resp => {\r\n                let result = resp.data;\r\n                this.setState({\r\n                    userMobileCountries: result\r\n                })\r\n                //console.log(result);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n\r\n    getNationalities = () => {\r\n        var resp = getNationalities()\r\n            .then(resp => {\r\n                let result = resp.data;\r\n                this.setState({\r\n                    userNationality: result\r\n                })\r\n                //console.log(result);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n    // Close\r\n\r\n\r\n\r\n    // Dropdoewn handling\r\n    setTitle(value) {\r\n        this.setState({\r\n            title: value\r\n        })\r\n    }\r\n\r\n    setIdType(value) {\r\n        this.setState({\r\n            id_type: value\r\n        })\r\n    }\r\n\r\n    setMobileCountry(value) {\r\n        this.setState({\r\n            country_code: value\r\n        })\r\n    }\r\n\r\n    setNationality(value) {\r\n        this.setState({\r\n            nationality_code: value\r\n        })\r\n    }\r\n\r\n    // Close\r\n\r\n\r\n    validateInput() {\r\n        const { fname, lname, reg_email, phone, password, conf_pass } = this.state;\r\n        let pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w\\w+)+$/;\r\n        //Alert.alert('Credentials', `${username} + ${password}`);\r\n        if ((fname == '')) {\r\n            this.setState({\r\n                fname_err: 'First name is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                fname_err: ''\r\n            })\r\n        }\r\n\r\n        if ((lname == '')) {\r\n            this.setState({\r\n                lname_err: 'Last name is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                lname_err: ''\r\n            })\r\n        }\r\n\r\n        if ((reg_email == '')) {\r\n            this.setState({\r\n                email_err: 'Email is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                email_err: ''\r\n            })\r\n        }\r\n\r\n        if (pattern.test(reg_email) === false) {\r\n            this.setState({\r\n                email_err: 'Email is not valid'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                email_err: ''\r\n            })\r\n        }\r\n\r\n        if ((phone == '')) {\r\n            this.setState({\r\n                phone_err: 'Phone no is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                phone_err: ''\r\n            })\r\n        }\r\n\r\n        if ((password == '')) {\r\n            this.setState({\r\n                password_err: 'Password is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                password_err: ''\r\n            })\r\n        }\r\n\r\n        if ((conf_pass == '')) {\r\n            this.setState({\r\n                conf_pass_err: 'Confirm Password is required'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                conf_pass_err: ''\r\n            })\r\n        }\r\n\r\n        if ((password != conf_pass)) {\r\n            this.setState({\r\n                password_err: 'Confirm Password & Password does not match'\r\n            })\r\n            return;\r\n        }\r\n        else {\r\n            this.setState({\r\n                password_err: ''\r\n            })\r\n        }\r\n\r\n        if ((fname != '') && (lname != '') && (reg_email != '') && (phone != '') && (password != '') && (conf_pass != '')) {\r\n            this.register();\r\n        }\r\n    }\r\n\r\n    register = async () => {\r\n        let data = {\r\n            title: this.state.title,\r\n            fname: this.state.fname,\r\n            lname: this.state.lname,\r\n            email: this.state.reg_email,\r\n            country_code: this.state.country_code,\r\n            phone: this.state.phone,\r\n            nationality_code: this.state.nationality_code,\r\n            password: this.state.password,\r\n            id_type: this.state.id_type,\r\n            id_number: this.state.id_number,\r\n            platform: Platform.OS\r\n        }\r\n\r\n        console.log(data);\r\n        // var response = NewregisterAPI(data)\r\n        //     .then(res => {\r\n        //         console.log(res);\r\n        //         let message = res.message;\r\n        //         let status = res.status;\r\n\r\n        //         if ((status == 2)) {\r\n        //             //Alert.alert(message);\r\n        //             this.setState({\r\n        //                 api_resp: message\r\n        //             });\r\n        //             setTimeout(() => {\r\n        //                 this.setState({\r\n        //                     api_resp: '',\r\n        //                 });\r\n        //             }, 5000);\r\n        //         } else {\r\n        //             //Alert.alert(message);\r\n        //             this.setState({\r\n        //                 api_resp: message\r\n        //             });\r\n        //             setTimeout(() => {\r\n        //                 this.setState({\r\n        //                     api_resp: '',\r\n        //                 })\r\n        //             }, 3000);\r\n        //             setTimeout(() => {\r\n        //                 this.props.navigation.navigate('LoginScreen');\r\n        //             }, 5000);\r\n        //         }\r\n        //     })\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <LinearGradient colors={['#663792', '#3d418b', '#0a4487']} start={{ x: 0, y: 1 }} end={{ x: 1, y: 1 }} style={styles.linearGradient}            >\r\n                <SafeAreaView style={styles.scrollArea}>\r\n                    <ScrollView style={styles.innerView}>\r\n                        <View style={styles.logincontainer}>\r\n                            <View style={{ paddingVertical: 20 }}>\r\n                                <Text style={customstyles.headingWhite}>Signup</Text>\r\n                            </View>\r\n\r\n                            <Text>{this.state.api_resp}</Text>\r\n\r\n                            <View style={customstyles.dropdownBox}>\r\n                                <Picker\r\n                                    selectedValue={this.state.title}\r\n                                    onValueChange={(value, index) => this.setTitle(value)}\r\n                                    mode=\"dropdown\" // Android only\r\n                                    style={customstyles.dropdown} dropdownIconColor='#fff'\r\n                                >\r\n                                    <Picker.Item label=\"Select Title\" value=\"\" color='black' />\r\n                                    {\r\n                                        this.state.userTitles ?\r\n                                            this.state.userTitles.map((item, i) => (\r\n                                                <Picker.Item key={i} label={item.code} value={item.code} color='black' />\r\n                                            ))\r\n                                            : <Picker.Item label='No Data' value='0' color='black' />\r\n                                    }\r\n                                </Picker>\r\n                            </View>\r\n                            <View>\r\n                                <TextInput\r\n                                    value={this.state.fname}\r\n                                    onChangeText={(fname) => this.setState({ fname })}\r\n                                    placeholder={'Enter First Name'}\r\n                                    style={customstyles.input}\r\n                                    placeholderTextColor=\"#fff\"\r\n                                />\r\n                                {\r\n                                    this.state.fname_err.length > 0 &&\r\n                                    <Text style={customstyles.alertdanger}>{this.state.fname_err}</Text>\r\n                                }\r\n                            </View>\r\n\r\n                            <View>\r\n                                <TextInput\r\n                                    value={this.state.lname}\r\n                                    onChangeText={(lname) => this.setState({ lname })}\r\n                                    placeholder={'Enter Last Name'}\r\n                                    style={customstyles.input}\r\n                                    placeholderTextColor=\"#fff\"\r\n                                />\r\n                                {\r\n                                    this.state.lname_err.length > 0 &&\r\n                                    <Text style={customstyles.alertdanger}>{this.state.lname_err}</Text>\r\n                                }\r\n                            </View>\r\n\r\n                            <View>\r\n                                <TextInput\r\n                                    value={this.state.reg_email}\r\n                                    onChangeText={(reg_email) => this.setState({ reg_email })}\r\n                                    placeholder={'Enter Email'}\r\n                                    style={customstyles.input}\r\n                                    placeholderTextColor=\"#fff\"\r\n                                />\r\n                                {\r\n                                    this.state.email_err.length > 0 &&\r\n                                    <Text style={customstyles.alertdanger}>{this.state.email_err}</Text>\r\n                                }\r\n                            </View>\r\n                            <View style={customstyles.dropdownBox}>\r\n                                <Picker\r\n                                    selectedValue={this.state.country_code}\r\n                                    onValueChange={(value, index) => this.setMobileCountry(value)}\r\n                                    mode=\"dropdown\" // Android only\r\n                                    style={customstyles.dropdown}\r\n                                >\r\n                                    <Picker.Item label=\"Select Country Code\" value=\"\" color='black' />\r\n                                    {\r\n                                        this.state.userMobileCountries ?\r\n                                            this.state.userMobileCountries.map((item, i) => (\r\n                                                <Picker.Item key={i} label={'+' + item.description} value={item.code} color=\"black\" />\r\n                                            ))\r\n                                            : <Picker.Item label='No Data' value='0' />\r\n                                    }\r\n                                </Picker>\r\n                            </View>\r\n\r\n                            <View>\r\n                                <TextInput\r\n                                    value={this.state.phone}\r\n                                    keyboardType={'numeric'}\r\n                                    onChangeText={(phone) => this.setState({ phone })}\r\n                                    placeholder={'Enter Phone No'}\r\n                                    style={customstyles.input}\r\n                                    placeholderTextColor=\"#fff\"\r\n                                />\r\n                                {\r\n                                    this.state.phone_err.length > 0 &&\r\n                                    <Text style={customstyles.alertdanger}>{this.state.phone_err}</Text>\r\n                                }\r\n                            </View>\r\n\r\n                            <View style={customstyles.dropdownBox}>\r\n                                <Picker\r\n                                    selectedValue={this.state.nationality_code}\r\n                                    onValueChange={(value, index) => this.setNationality(value)}\r\n                                    mode=\"dropdown\" // Android only\r\n                                    style={customstyles.dropdown}\r\n                                >\r\n                                    <Picker.Item label=\"Select Nationality\" value=\"\" color='black' />\r\n                                    {\r\n                                        this.state.userNationality ?\r\n                                            this.state.userNationality.map((item, i) => (\r\n                                                <Picker.Item key={i} label={item.code} value={item.code} color=\"black\" />\r\n                                            ))\r\n                                            : <Picker.Item label='No Data' value='0' />\r\n                                    }\r\n                                </Picker>\r\n                            </View>\r\n\r\n                            <View>\r\n                                <TextInput\r\n                                    value={this.state.password}\r\n                                    secureTextEntry={true}\r\n                                    onChangeText={(password) => this.setState({ password })}\r\n                                    placeholder={'Enter Pasword'}\r\n                                    style={customstyles.input}\r\n                                    placeholderTextColor=\"#fff\"\r\n                                />\r\n                                {\r\n                                    this.state.password_err.length > 0 &&\r\n                                    <Text style={customstyles.alertdanger}>{this.state.password_err}</Text>\r\n                                }\r\n                            </View>\r\n\r\n                            <View>\r\n                                <TextInput\r\n                                    value={this.state.conf_pass}\r\n                                    secureTextEntry={true}\r\n                                    onChangeText={(conf_pass) => this.setState({ conf_pass })}\r\n                                    placeholder={'Enter Confirm Password'}\r\n                                    style={customstyles.input}\r\n                                    placeholderTextColor=\"#fff\"\r\n                                />\r\n                                {\r\n                                    this.state.conf_pass_err.length > 0 &&\r\n                                    <Text style={customstyles.alertdanger}>{this.state.conf_pass_err}</Text>\r\n                                }\r\n                            </View>\r\n\r\n                            <View style={customstyles.dropdownBox}>\r\n                                <Picker\r\n                                    selectedValue={this.state.id_type}\r\n                                    onValueChange={(value, index) => this.setIdType(value)}\r\n                                    mode=\"dropdown\" // Android only\r\n                                    style={customstyles.dropdown}\r\n                                >\r\n                                    <Picker.Item label='Select Id Types' value='' color='black' />\r\n                                    {\r\n                                        this.state.userIdTypes ?\r\n                                            this.state.userIdTypes.map((item, i) => (\r\n                                                <Picker.Item key={i} label={item.description} value={item.code} color=\"black\" />\r\n                                            ))\r\n                                            : <Picker.Item label='No Data' value='0' />\r\n                                    }\r\n                                </Picker>\r\n                            </View>\r\n\r\n                            <TextInput\r\n                                value={this.state.id_number}\r\n                                onChangeText={(id_number) => this.setState({ id_number })}\r\n                                placeholder={'Enter Id Number'}\r\n                                style={customstyles.input}\r\n                                placeholderTextColor=\"#fff\"\r\n                            />\r\n                            {/* <Text style={this.state.conf_pass_err ? customstyles.alertdanger : ''}>{this.state.conf_pass_err}</Text> */}\r\n\r\n\r\n\r\n                            <TouchableOpacity onPress={this.validateInput.bind(this)}>\r\n                                <View\r\n                                    style={{\r\n                                        ...styles.button,\r\n                                        backgroundColor: this.state.isLoading ? \"#fff\" : \"#FFF\",\r\n                                    }}\r\n                                >\r\n                                    <Text style={styles.buttonText}>\r\n                                        {this.state.isLoading ? \"SENDING...\" : \"SUBMIT\"}\r\n                                    </Text>\r\n                                    {this.state.isLoading && <ActivityIndicator size=\"large\" color=\"#663792\" />}\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </ScrollView>\r\n                </SafeAreaView>\r\n            </LinearGradient>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    linearGradient: {\r\n        flex: 1,\r\n        width: \"100%\",\r\n    },\r\n    scrollArea: {\r\n        flex: 1,\r\n        width: \"100%\",\r\n        paddingTop: StatusBar.currentHeight,\r\n    },\r\n    innerView: {\r\n        height: \"100%\",\r\n        paddingHorizontal: 20,\r\n\r\n    },\r\n    input: {\r\n        width: 200,\r\n        height: 44,\r\n        padding: 10,\r\n        borderWidth: 1,\r\n        borderColor: 'black',\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-evenly\",\r\n        alignItems: \"center\",\r\n        padding: 10,\r\n        marginBottom: 20,\r\n        borderRadius: 30,\r\n    },\r\n    buttonText: {\r\n        color: \"#663792\",\r\n        fontWeight: \"bold\",\r\n        fontSize: 20\r\n    },\r\n    picker: {\r\n        marginVertical: 30,\r\n        width: 300,\r\n        padding: 10,\r\n        borderWidth: 1,\r\n        borderColor: \"#fff\",\r\n        color: '#fff'\r\n    },\r\n\r\n});\r\n\r\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}