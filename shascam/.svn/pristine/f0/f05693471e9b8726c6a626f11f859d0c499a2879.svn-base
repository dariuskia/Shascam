import React, { useEffect, useState, useRef } from 'react';
import { Alert, Button, TextInput, View, StyleSheet, Text, TouchableOpacity, SafeAreaView, ScrollView, StatusBar } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import Loader from './Loader';
import { customstyles } from "../customstyle";
import * as ImagePicker from 'expo-image-picker';
import { commonPost } from "../components/functions.js";
import Background from './Background';

function ShowDocs({ navigation, route }) {

    const [userId, setUserId] = React.useState('');
    const [folderId, setFolderId] = React.useState('');
    const [folderName, setFolderName] = React.useState('');
    const [image_base64, setImageBase] = React.useState([]);
    const [documents, setDocuments] = React.useState('');
    const [DataisLoaded, setDataisLoaded] = useState(false);
    const [docTitle, setDocTitle] = useState('');
    const [fieldErr, setFieldErr] = useState('');
    const [successResp, setResponse] = useState('');

    React.useEffect(() => {
        let isMounted = true;
        let userId = route.params.user_id;
        let folderId = route.params.folder_id;
        let folderName = route.params.folder_name ? route.params.folder_name : '';
        setUserId(userId);
        setFolderId(folderId);
        setFolderName(folderName);
        getDocs(userId, folderId);
    }, []);

    // Docs Listng Api
    let getDocs = (userId, folderId) => {

        let data = {
            user_id: userId,
            folder_id: folderId,
            api_url: 'getFileList'
        }
        //console.log('data', data);

        var resp = commonPost(data)
            .then(resp => {
                let result = resp;
                console.log(result);
                if ((result.status == 0)) {
                    setDocuments([]);
                    setDataisLoaded(true);
                } else {
                    setDocuments(result.data);
                    setDataisLoaded(true);
                }
            })
            .catch((error) => {
                console.log(error)
            })
    }
    // Close

    // Image Picker
    let pickImage = async () => {
        const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
        if (permissionResult.granted === false) {
            alert("Permission to access camera roll is required!");
            return;
        } else {
            let result = await ImagePicker.launchImageLibraryAsync({
                mediaTypes: ImagePicker.MediaTypeOptions.All,
                allowsEditing: true,
                aspect: [4, 3],
                quality: 1,
                base64: true,
            });
            let imageUri = result ? `data:image/jpg;base64,${result.base64}` : null;
            setImageBase(imageUri);

        }

    };
    // Close 

    // Upload Docs
    let submitDocument = () => {
        let user_id = userId;
        let doc_title = docTitle;
        let folder_id = folderId;
        let base_64 = image_base64;

        if ((base_64 == '')) {
            setFieldErr('Please Upload a Document');
            setTimeout(() => {
                setFieldErr('');
            }, 3000);
            return;
        }
        if ((doc_title == '')) {
            setFieldErr('Document title is required to upload a Document');
            setTimeout(() => {
                setFieldErr('');
            }, 3000);
            return;
        }

        if ((doc_title != '') && (base_64 != '')) {
            let data = {
                user_id: user_id,
                folder_id: folder_id,
                document: base_64,
                doc_title: doc_title,
                api_url: 'uploadDoc'
            }
            //console.log(data);

            var resp = commonPost(data)
                .then(resp => {
                    let result = resp;
                    console.log(result);
                    let status = result.status;
                    let message = result.message;

                    if ((status === 1)) {
                        setResponse(message);
                        setDocTitle('');
                        setImageBase('');
                        getDocs(user_id, folder_id);
                        setTimeout(() => {
                            setResponse('');
                        }, 3000)
                    } else {
                        setFieldErr(message);
                        setDocTitle('');
                        setTimeout(() => {
                            setFieldErr('');
                        }, 3000)
                    }
                })
                .catch((error) => {
                    console.log(error)
                })
        }
    }
    // Close

    // Delete User File
    let deleteUserFile = (doc_id) => {
        //console.log(doc_id);

        Alert.alert(
            'Delete File',
            'Are you sure you want to delete this file?',
            [
                {
                    text: 'Cancel',
                    onPress: () => console.log('Cancel Pressed'),
                    style: 'cancel',
                },
                { text: 'OK', onPress: () => confirmDel() },
            ]
        );

        let confirmDel = () => {
            let data = {
                doc_id: doc_id,
                user_id: userId,
                folder_id: folderId,
                api_url: 'deleteFile'
            }
            console.log(data);
            var resp = commonPost(data)
                .then(resp => {
                    let result = resp;
                    let status = result.status;
                    let message = result.message;
                    //console.log(result);
                    if ((status == 1)) {
                        setResponse(message);
                        setTimeout(() => {
                            setResponse('');
                        }, 3000)
                        getDocs(userId, folderId);
                    } else {
                        setResponse(message);
                        setTimeout(() => {
                            setResponse('');
                        }, 3000)
                    }
                })
                .catch((error) => {
                    console.log(error)
                })
        }


    }
    // Close

    if (!DataisLoaded) {
        return <Loader />;
    }
    return (
        <SafeAreaView style={styles.scrollArea}>
            <View style={{ ...customstyles.header, ...customstyles.px15 }}>
                <View>
                    <TouchableOpacity onPress={() => navigation.goBack()} style={[customstyles.btnThemecircle, { width: 28, height: 28 }]}>
                        <Ionicons name="md-chevron-back-outline" size={16} color="white" />
                    </TouchableOpacity>
                </View>
                <Text style={{ ...customstyles.headerHeading, ...customstyles.flexgrow1, }}>Upload Document</Text>
            </View>
            <ScrollView style={styles.innerView}>
                <View style={styles.container}>
                    <View style={{ ...customstyles.whitebox, ...customstyles.shadowBlock, ...customstyles.mx10, ...customstyles.my15, ...customstyles.p15 }}>
                        <View>
                            {
                                fieldErr != '' && <Text style={{ ...customstyles.mb10, ...customstyles.textred }}>{fieldErr}</Text>
                            }

                            {
                                successResp != '' && <Text style={{ ...customstyles.mb10, ...customstyles.textgreen }}>{successResp}</Text>
                            }
                        </View>
                        <View style={customstyles.mb10}>
                            <TouchableOpacity onPress={pickImage} style={{ ...customstyles.py15, ...customstyles.bgtheme, ...customstyles.rowverticalcenter, ...customstyles.textCenter, ...customstyles.radius10 }}>

                                <Ionicons name="cloud-upload-outline" size={36} color="#fff"></Ionicons>
                                <Text style={{ ...customstyles.h5, ...customstyles.textwhite, ...customstyles.ml10 }}>Upload File</Text>
                            </TouchableOpacity>
                        </View>

                        <View>
                            <Text style={{ ...customstyles.h5, ...customstyles.mb5 }}>Add Document Title</Text>
                            <TextInput
                                placeholder={'Document Name'}
                                onChangeText={(docTitle) => setDocTitle(docTitle)}
                                style={customstyles.inputtheme}
                            />
                        </View>
                        <TouchableOpacity onPress={submitDocument} style={customstyles.mb10}>
                            <Text style={customstyles.btnTheme}>SUBMIT DOCUMENT</Text>
                        </TouchableOpacity>
                    </View>

                    <View style={{ ...customstyles.whitebox, ...customstyles.shadowBlock, ...customstyles.mx10, ...customstyles.my15, ...customstyles.p15 }}>
                        <View>
                            <Text style={{...customstyles.h5, ...customstyles.mb10}}>{folderName} - List of Documents</Text>
                        </View>
                        {
                            documents.length > 0 &&
                            documents.map((item, i) => (
                                <View key={i} style={{...customstyles.checkboxlist, ...customstyles.mb5}}>
                                    <Text style={{...customstyles.mr10,}}>{item.document_title}</Text>
                                    <View key={item.id} style={{...customstyles.upright,...customstyles.mr5, ...{marginTop: 8,}}}>
                                        <TouchableOpacity style={{ ...customstyles.uprightDelete }} onPress={() => deleteUserFile(item.id)} >
                                            <Ionicons name="close-outline" size={24} color="white" />
                                        </TouchableOpacity>
                                    </View>
                                    {/* <Button onPress={() => deleteUserFile(item.id)} title="X" color="red" /> */}
                                </View>
                            ))
                        }
                    </View>
                </View>
            </ScrollView>
        </SafeAreaView >
    )
}

const styles = StyleSheet.create({
    scrollArea: {
        flex: 1,
        width: "100%",
        backgroundColor: "white",
        // paddingTop: StatusBar.currentHeight,
    },
    innerView: {
        height: "100%",
        paddingHorizontal: 10,
    }
});

export default ShowDocs;


