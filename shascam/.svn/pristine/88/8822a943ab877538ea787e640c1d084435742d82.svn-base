import React, { Component } from 'react';
import { Alert, TextInput, View, StyleSheet, Text, TouchableOpacity, SafeAreaView, Image, Dimensions, ScrollView, StatusBar } from 'react-native';
import { Ionicons, FontAwesome } from '@expo/vector-icons';
import { Button, Menu, Divider, Provider } from 'react-native-paper';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Carousel, { Pagination } from 'react-native-snap-carousel';
import { customstyles } from "../customstyle";
import { commonGet, commonPost } from './functions';
import Background from './Background';
const slide1 = require('../assets/Images/McDonalds-coupons.jpg');

const SLIDER_WIDTH = Dimensions.get('window').width - 40;
const SLIDER_HEIGHT = Math.round(SLIDER_WIDTH * 3 / 4) - 30;
const ITEM_WIDTH = Math.round(SLIDER_WIDTH) - 60;
const ITEM_HEIGHT = Math.round(SLIDER_HEIGHT) - 30;
const IMG_WIDTH = Math.round(ITEM_WIDTH);
const IMG_HEIGHT = Math.round(ITEM_HEIGHT)

class ProfileScreen extends Component {

    state = {
        userData: '',
        activeIndex: 0,
        carouselItems: [],
        selectedMenu: '',
        visible: false,
        is_wallet_check: '',
        isLoading: false,
    }
    componentDidMount() {
        const value = AsyncStorage.getItem('userInfo')
            .then((value) => {
                this.setState({
                    userData: JSON.parse(value),
                });
                if ((this.state.userData.mm_wallet_check == 1)) {
                    this.setState({
                        is_wallet_check: 1,
                    });
                } else {
                    this.setState({
                        is_wallet_check: 0,
                    });
                }
            });
        this.getGeneralOffer();
    }

    onPressEditProfile = () => {
        this.props.navigation.navigate('EditProfile', {
            userDetails: this.state.userData,
        })
    }

    onPressCategory = () => {
        this.props.navigation.navigate('Category', {
            userDetails: this.state.userData,
        })
    }
    onPressWallet = () => {
        this.props.navigation.navigate('Wallet', {
            userDetails: this.state.userData,
        })
    }
    onPressAddress = () => {
        this.props.navigation.navigate('Address', {
            userDetails: this.state.userData,
        })
    }
    offerNavigate = () => {
        this.props.navigation.navigate('Offer', {
            user_id: this.state.userData.id,
        });
    }
    onPressInfo = () => {
        this.props.navigation.navigate('Info', {
            userDetails: this.state.userData,
        })
    }

    onPressOffer = () => {
        this.props.navigation.navigate('Offer', {
            user_id: this.state.userData.id,
        })
    }

    getNotification = () => {
        this.props.navigation.navigate('Notification', {
            user_id: this.state.userData.id,
        })
    }


    userLogout = () => {
        Alert.alert('Logout', 'Are you sure you want to Logout?', [
            {
                text: 'Cancel',
                onPress: () => console.log('Cancel Pressed'),
                style: 'cancel',
            },
            { text: 'OK', onPress: () => { AsyncStorage.removeItem('userInfo'); this.props.navigation.navigate('HomeScreen'); } },
        ]);
    }

    LoggedOut = () => {
        console.log('LoggedOut');
    }

    openMenu = () => {
        this.setState({
            visible: true,
        })
    }

    closeMenu = () => {
        this.setState({
            visible: false,
        })
    }

    // deactiveAccount
    deactiveAccount = () => {
        let userId = this.state.userData.id;

        Alert.alert(
            'Deactivate Account',
            'Are you sure you want deactivate your account?',
            [
                {
                    text: 'Cancel',
                    onPress: () => console.log('Cancel Pressed'),
                    style: 'cancel',
                },
                { text: 'OK', onPress: () => confirmDeactive() },
            ]
        );

        let confirmDeactive = () => {
            let data = {
                id: userId,
                api_url: 'deactivateMMuser'
            }
            //console.log(data); return;

            var resp = commonPost(data)
                .then(resp => {
                    let result = resp;
                    let message = result.description;
                    // let status = result.status;
                    console.log(result);
                    this.setState({
                        deactive_msg: message,
                    })
                    setTimeout(() => {
                        localStorage.clear();
                        this.props.navigation.navigate('Login');
                        this.setState({
                            deactive_msg: '',
                        });
                    }, 4000);
                })
                .catch((error) => {
                    console.log(error)
                })
        }
    }
    // Close

    // check Kyc
    checkKYC = () => {
        Alert.alert(
            'Check KYC Status',
            'Are You Interested To Check Your KYC Status?',
            [
                {
                    text: 'Cancel',
                    onPress: () => console.log('Cancel Pressed'),
                    style: 'cancel',
                },
                { text: 'OK', onPress: () => confirmKYC() },
            ]
        );

        let confirmKYC = () => {
            let userId = this.state.userData.id;
            let data = {
                id: userId,
                api_url: 'eKYCVerfication'
            }
            //console.log(data); return;

            var resp = commonPost(data)
                .then(resp => {
                    let result = resp;
                    console.log(result);

                    let status = result.success;
                    if ((status == true)) {
                        this.setState({
                            active_msg: 'KYC done Successfully!!',
                        });
                        setTimeout(() => {
                            this.setState({
                                active_msg: '',
                            });
                        }, 4000);
                    } else {
                        this.setState({
                            deactive_msg: 'KYC not done!!',
                        });
                        setTimeout(() => {
                            this.setState({
                                deactive_msg: '',
                            });
                        }, 4000);
                    }
                })
                .catch((error) => {
                    console.log(error)
                })
        }
    }
    // Close
    // Create Wallet
    createWallet = () => {
        Alert.alert(
            'Create Wallet',
            'Are you sure you want to create a wallet?',
            [
                {
                    text: 'Cancel',
                    onPress: () => console.log('Cancel Pressed'),
                    style: 'cancel',
                },
                { text: 'OK', onPress: () => confirmCreate() },
            ]
        );

        let confirmCreate = () => {
            let userId = this.state.userData.id;
            let data = {
                id: userId,
                api_url: 'createWallet'
            }
            //console.log(data); return;
            this.setState({
                isLoading: true,
            });
            var resp = commonPost(data)
                .then(resp => {
                    let result = resp;
                    console.log(result);

                    let message = result.description;
                    let code = result.code;
                    if ((code == 400)) {
                        this.setState({
                            deactive_msg: message,
                            isLoading: false,
                        });
                        setTimeout(() => {
                            this.setState({
                                deactive_msg: '',
                            });
                        }, 4000);
                    } else {
                        this.setState({
                            active_msg: message,
                            isLoading: false,
                        });
                        setTimeout(() => {
                            this.setState({
                                active_msg: '',
                            });
                        }, 4000);
                    }
                })
                .catch((error) => {
                    console.log(error)
                })
        }
    }
    // Close

    // Get General offer
    getGeneralOffer = () => {
        let data = {
            api_url: 'getGeneralOffer'
        }
        var resp = commonGet(data)
            .then(resp => {
                let result = resp.data;
                console.log(result);
                if (result) {
                    this.setState({
                        carouselItems: result,
                    })
                }
            })
            .catch((error) => {
                console.log(error)
            })
    }
    // Close
    setmenu = (value) => {
        //console.log(value);
        if ((value == 'Edit Profile')) {
            this.onPressEditProfile();
        } else if ((value == 'Set Prefrence')) {
            this.onPressCategory();
        } else {
            this.userLogout();
        }
        this.setState({
            selectedMenu: value
        });
    }

    _renderItem({ item, index }) {    // coursel
        return (
            <View style={{
                backgroundColor: 'floralwhite',
                borderRadius: 5,
                //height: ITEM_HEIGHT,
                //height: 400,
                padding: 0,
                marginLeft: 0,
                marginRight: 0,
                borderRadius: 10,
                overflow: "hidden",
                shadowColor: '#ddd',
                shadowOffset: { width: -2, height: 3 },
                shadowOpacity: 1.0,
                shadowRadius: 7,
                elevation: 8,
                // borderWidth: 1,
                // borderColor: "red"
            }}>
                <Image source={slide1} style={styles.sliderImg} />
                <Text style={styles.company_name}>{item.comp_name}</Text>
                <Text style={styles.offerTitleHeading}>{item.offer_title}</Text>
                <Text style={styles.price}>$ {item.data_share_price + item.open_to_contact_price}</Text>
            </View>
        )
    }

    render() {
        return (

            <SafeAreaView style={styles.scrollArea}>
                <Provider>
                    <View style={customstyles.header}>
                        <Text style={{ ...customstyles.headerHeading, ...customstyles.flexgrow1, ...customstyles.pl60 }}>My Profile</Text>
                        <Menu
                            visible={this.state.visible}
                            onDismiss={this.closeMenu}
                            style={{
                                width: 200,
                            }}
                            anchor={<Button onPress={this.openMenu}>
                                <Ionicons name="person-circle-outline" size={32} color="#663792" />
                            </Button>}>

                            <Menu.Item onPress={this.onPressEditProfile} title="Edit Profile" style={{ borderColor: "#ddd", borderBottomWidth: 1, }} />
                            <Menu.Item onPress={this.onPressCategory} title="Categories" style={{ borderColor: "#ddd", borderBottomWidth: 1, }} />
                            <Menu.Item onPress={this.checkKYC} title="Check KYC Status" style={{ borderColor: "#ddd", borderBottomWidth: 1, }} />
                            <Menu.Item onPress={this.onPressAddress} title="Set Addess" style={{ borderColor: "#ddd", borderBottomWidth: 1, }} />
                            <Menu.Item onPress={this.deactiveAccount} title="Deactivate Account" style={{ borderColor: "#ddd", borderBottomWidth: 1, }} />
                            <Menu.Item onPress={this.getNotification} title="Notification" style={{ borderColor: "#ddd", borderBottomWidth: 1, }} />
                            <Menu.Item onPress={this.userLogout} title="Logout" />
                        </Menu>
                    </View>
                    <View style={customstyles.px15}>
                        {
                            this.state.deactive_msg !== '' &&
                            <Text style={{ color: 'red' }}>{this.state.deactive_msg}</Text>
                        }
                        {
                            this.state.active_msg !== '' &&
                            <Text style={{ color: 'green' }}>{this.state.active_msg}</Text>
                        }
                        <Text style={customstyles.titleText}>Welcome {this.state.userData.fname != '' ? this.state.userData.fname : ''} {this.state.userData.lname != '' ? this.state.userData.lname : ''}</Text>
                    </View>
                    <View style={customstyles.px15}>
                        <Text style={customstyles.update}>Here are your updates!</Text>
                    </View>
                    <View style={[customstyles.row, customstyles.justifyContentcenter, customstyles.px15, { marginBottom: 20, }]}>
                        <View style={[customstyles.p15, customstyles.lightbox, { width: "48%" }]}>
                            <TouchableOpacity onPress={this.onPressInfo} style={storeStyle.widgetStore}>
                                <Text style={storeStyle.titleText}>Info Store</Text>

                                <Text style={storeStyle.completionText}>Progress</Text>

                                <View style={{ width: "50%", borderRadius: 10, marginLeft: "auto", marginRight: "auto", marginBottom: 10 }}>

                                </View>
                                <Text style={storeStyle.subTitleText}>Upload your NRIC Card for more offers!</Text>
                            </TouchableOpacity>
                        </View>
                        <View style={[customstyles.p15, customstyles.lightbox, { width: "48%" }]}>
                            <Text style={storeStyle.titleText}>Wallet</Text>
                            {
                                this.state.is_wallet_check !== 1 ?
                                    <View>
                                        <Text>Don't have a wallet?</Text>
                                        <TouchableOpacity onPress={this.createWallet} style={customstyles.textCenter}>
                                            <View style={{ display: "flex", justifyContent: "center", alignItems: "center" }} >
                                                <Text style={customstyles.btnThemexs}>
                                                    {this.state.isLoading ? "Creating..." : "Create Wallet"}
                                                </Text>
                                            </View>
                                        </TouchableOpacity>
                                    </View> :
                                    <View>
                                        <TouchableOpacity style={customstyles.textCenter} onPress={this.onPressWallet} >
                                            <View style={{ display: "flex", justifyContent: "center", alignItems: "center" }}>
                                                <Text style={[customstyles.btnThemexs]}> View Wallet</Text>
                                            </View>
                                        </TouchableOpacity>
                                    </View>
                            }
                        </View>
                    </View>
                    {/* coursel */}
                    <View style={{ flex: 1, flexDirection: 'row', justifyContent: 'center', }}>
                        <TouchableOpacity onPress={this.onPressOffer}>
                            <Carousel
                                layout={"default"}
                                ref={ref => this.carousel = ref}
                                data={this.state.carouselItems}
                                sliderWidth={SLIDER_WIDTH}
                                sliderHeight={SLIDER_HEIGHT}
                                itemWidth={ITEM_WIDTH}
                                itemHEIGHT={ITEM_HEIGHT}
                                renderItem={this._renderItem}
                                autoplay={true}
                                loop={true}
                                onSnapToItem={index => this.setState({ activeIndex: index })} />
                        </TouchableOpacity>
                    </View>
                    {/* Close */}
                </Provider>
            </SafeAreaView >
        );
    }
}

const styles = StyleSheet.create({
    scrollArea: {
        flex: 1,
        width: "100%",
        // paddingTop: StatusBar.currentHeight,
        paddingBottom: 0,
        backgroundColor: "white",
    },
    innerView: {
        //flex: 1,
        height: "100%",
        paddingHorizontal: 20,
        // paddingBottom: 15,
    },

    container: {
        // flex: 1,
        //alignItems: 'center',
        justifyContent: 'center',
        // backgroundColor: '#ecf0f1',
        marginBottom: 30,
    },
    row: {
        flexDirection: "row",
        flexWrap: "wrap",
        justifyContent: "space-between",
        width: "100%"
    },
    input: {
        width: 200,
        height: 44,
        padding: 10,
        borderWidth: 1,
        borderColor: 'black',
        marginBottom: 10,
    },
    button: {
        alignItems: "center",
        backgroundColor: "#DDDDDD",
        padding: 10,
        marginBottom: 20,
    },
    offerTitleHeading: {
        position: "absolute",
        left: 0,
        right: 0,
        top: 0,
        paddingTop: 5,
        paddingBottom: 5,
        paddingHorizontal: 10,
        color: "#fff",
        textAlign: "left",
        backgroundColor: "rgba(0, 0, 0, .5)",
        fontSize: 24,
        //fontWeight: "600",
    },
    company_name: {
        position: "absolute",
        left: 0,
        bottom: 0,
        textAlign: "left",
        backgroundColor: "rgba(0, 0, 0, .5)",
        borderTopRightRadius: 20,
        color: "#fff",
        margin: 0,
        paddingVertical: 5,
        paddingHorizontal: 10,
    },
    price: {
        position: "absolute",
        bottom: 0,
        right: 0,
        textAlign: "left",
        backgroundColor: "rgba(0, 0, 0, .5)",
        borderTopLeftRadius: 20,
        color: "#fff",
        margin: 0,
        paddingVertical: 5,
        paddingHorizontal: 10,
    },
    sliderImg: {
        width: IMG_WIDTH,
        height: IMG_HEIGHT,
        //inlineSize: '100%',
        //aspectRatio: '16 / 9',
        //objectFit: 'cover',
    },
})
const storeStyle = StyleSheet.create({
    widgetStore: {
        width: "100%",
        padding: 10,
        backgroundColor: "#EFF1F3",
        borderRadius: 10,
        // shadowOffset: { width: 0, height: 0 },
        // shadowOpacity: 0.2,
        // shadowRadius: 10,
    },
    rectangle: {
        width: "90%",
        height: "70%",
        backgroundColor: "#963910",
        borderRadius: 10
    },
    storeImage: {
        width: 100,
        height: 100,
    },
    titleText: {
        // fontFamily: "roboto",
        fontWeight: "700",
        fontSize: 24,
        // color: "#555",
        width: "100%",
        textAlign: 'center',
    },
    progress: {
        transform: [{ translateY: "-50%" }],
    },
    completionText: {
        // fontFamily: "roboto",
        fontWeight: "700",
        textAlign: 'center',
        marginBottom: 10,
    },
    subTitleText: {
        // fontFamily: "roboto",
        fontWeight: "500",
        fontSize: 14,
        textAlign: "center",
        color: "#000",
    },
    button: {
        // fontFamily: "roboto",
        fontWeight: "700",
        backgroundColor: "#963910"
    },
    normalText: {
        transform: [{ translateX: "-50%" }, { translateY: "-50%" }]
    }
})
export default ProfileScreen;